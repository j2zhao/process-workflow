[{"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638125152.2258089 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:46:09 2021 -0600", "msg": "1638125152.2258089_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638125152.2258089 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    spurious_corrs(cdf, True)"], "sub": ["-    spurious_corrs(cdf)"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:45:52 2021 -0600", "msg": "1638125152.2258089_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    spurious_corrs(cdf, True)"], "sub": ["-    spurious_corrs(cdf)"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1638125138.687626 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:45:48 2021 -0600", "msg": "1638125138.687626_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1638125138.687626 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638124888.4271302 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  if show_plots:", "+    cropped_df = df[(df['LONGITUDE'] > -87.83305453675) & (df['LATITUDE'] > 41.73919756425)]   #crop to regions of interest in Chicago", "+", "+    non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS']", "+    plot_octants(non_defective, \"Crashed by coordinate for crashes on non-defective roads only (zoomed in)\") #visualize for crashes on non-defective roads only", "+", "+    defective = cropped_df[cropped_df['ROAD_DEFECT'] != 'NO DEFECTS']", "+    plot_octants(defective, \"Crashed by coordinate for crashes on defective roads only (zoomed in)\") #visualize for crashes on defective roads only", "+", "+    dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "+                                  (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "+                                  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "+                                  (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]", "+    plot_octants(dangerous_roads,\"Crashed by coordinate for crashes on dangerous roads only (zoomed in)\") #visualize for crashes on dangerous roads only", "+", "+    non_dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] != 'DIVIDED - W/MEDIAN (NOT RAISED)') & (cropped_df['TRAFFICWAY_TYPE'] !=  'DIVIDED - W/MEDIAN BARRIER') & (cropped_df['TRAFFICWAY_TYPE'] != 'FOUR_WAY') & (cropped_df['TRAFFICWAY_TYPE'] != 'T-INTERSECTION') & (cropped_df['TRAFFICWAY_TYPE'] !=  'CENTER TURN LANE') & (cropped_df['TRAFFICWAY_TYPE'] !=  'Y-INTERSECTION')]", "+    plot_octants(non_dangerous_roads,\"Crashed by coordinate for crashes on non-dangerous roads only (zoomed in)\") #visualize for crashes on nondangerous roads only", "+", "+    for i in range(0, 100, 10):", "+      print(i)", "+      speeds = cropped_df[(cropped_df['POSTED_SPEED_LIMIT'] > i) & (cropped_df['POSTED_SPEED_LIMIT'] <= (i + 10))]", "+      try:", "+        plot_octants(speeds,\"Crashed by coordinate for crashes on roads with \" + str(i) + \"-\" + str(i+10) + \" mph speed limts  (zoomed in)\")", "+      except:", "+        print(\"No entries with this range of speed limits\")"], "sub": ["-  cropped_df = df[(df['LONGITUDE'] > -87.83305453675) & (df['LATITUDE'] > 41.73919756425)]   #crop to regions of interest in Chicago", "-", "-  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS']", "-  plot_octants(non_defective, \"Crashed by coordinate for crashes on non-defective roads only (zoomed in)\") #visualize for crashes on non-defective roads only", "-", "-  defective = cropped_df[cropped_df['ROAD_DEFECT'] != 'NO DEFECTS']", "-  plot_octants(defective, \"Crashed by coordinate for crashes on defective roads only (zoomed in)\") #visualize for crashes on defective roads only", "-", "-  dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "-                                (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "-                                | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "-                                (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]", "-  plot_octants(dangerous_roads,\"Crashed by coordinate for crashes on dangerous roads only (zoomed in)\") #visualize for crashes on dangerous roads only", "-", "-  non_dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] != 'DIVIDED - W/MEDIAN (NOT RAISED)') & (cropped_df['TRAFFICWAY_TYPE'] !=  'DIVIDED - W/MEDIAN BARRIER') & (cropped_df['TRAFFICWAY_TYPE'] != 'FOUR_WAY') & (cropped_df['TRAFFICWAY_TYPE'] != 'T-INTERSECTION') & (cropped_df['TRAFFICWAY_TYPE'] !=  'CENTER TURN LANE') & (cropped_df['TRAFFICWAY_TYPE'] !=  'Y-INTERSECTION')]", "-  plot_octants(non_dangerous_roads,\"Crashed by coordinate for crashes on non-dangerous roads only (zoomed in)\") #visualize for crashes on nondangerous roads only", "-", "-  for i in range(0, 100, 10):", "-    print(i)", "-    speeds = cropped_df[(cropped_df['POSTED_SPEED_LIMIT'] > i) & (cropped_df['POSTED_SPEED_LIMIT'] <= (i + 10))]", "-    try:", "-      plot_octants(speeds,\"Crashed by coordinate for crashes on roads with \" + str(i) + \"-\" + str(i+10) + \" mph speed limts  (zoomed in)\")", "-    except:", "-      print(\"No entries with this range of speed limits\")"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:45:36 2021 -0600", "msg": "1638124888.4271302_end"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  if show_plots:", "+    cropped_df = df[(df['LONGITUDE'] > -87.83305453675) & (df['LATITUDE'] > 41.73919756425)]   #crop to regions of interest in Chicago", "+", "+    non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS']", "+    plot_octants(non_defective, \"Crashed by coordinate for crashes on non-defective roads only (zoomed in)\") #visualize for crashes on non-defective roads only", "+", "+    defective = cropped_df[cropped_df['ROAD_DEFECT'] != 'NO DEFECTS']", "+    plot_octants(defective, \"Crashed by coordinate for crashes on defective roads only (zoomed in)\") #visualize for crashes on defective roads only", "+", "+    dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "+                                  (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "+                                  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "+                                  (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]", "+    plot_octants(dangerous_roads,\"Crashed by coordinate for crashes on dangerous roads only (zoomed in)\") #visualize for crashes on dangerous roads only", "+", "+    non_dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] != 'DIVIDED - W/MEDIAN (NOT RAISED)') & (cropped_df['TRAFFICWAY_TYPE'] !=  'DIVIDED - W/MEDIAN BARRIER') & (cropped_df['TRAFFICWAY_TYPE'] != 'FOUR_WAY') & (cropped_df['TRAFFICWAY_TYPE'] != 'T-INTERSECTION') & (cropped_df['TRAFFICWAY_TYPE'] !=  'CENTER TURN LANE') & (cropped_df['TRAFFICWAY_TYPE'] !=  'Y-INTERSECTION')]", "+    plot_octants(non_dangerous_roads,\"Crashed by coordinate for crashes on non-dangerous roads only (zoomed in)\") #visualize for crashes on nondangerous roads only", "+", "+    for i in range(0, 100, 10):", "+      print(i)", "+      speeds = cropped_df[(cropped_df['POSTED_SPEED_LIMIT'] > i) & (cropped_df['POSTED_SPEED_LIMIT'] <= (i + 10))]", "+      try:", "+        plot_octants(speeds,\"Crashed by coordinate for crashes on roads with \" + str(i) + \"-\" + str(i+10) + \" mph speed limts  (zoomed in)\")", "+      except:", "+        print(\"No entries with this range of speed limits\")"], "sub": ["-  cropped_df = df[(df['LONGITUDE'] > -87.83305453675) & (df['LATITUDE'] > 41.73919756425)]   #crop to regions of interest in Chicago", "-", "-  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS']", "-  plot_octants(non_defective, \"Crashed by coordinate for crashes on non-defective roads only (zoomed in)\") #visualize for crashes on non-defective roads only", "-", "-  defective = cropped_df[cropped_df['ROAD_DEFECT'] != 'NO DEFECTS']", "-  plot_octants(defective, \"Crashed by coordinate for crashes on defective roads only (zoomed in)\") #visualize for crashes on defective roads only", "-", "-  dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "-                                (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "-                                | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "-                                (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]", "-  plot_octants(dangerous_roads,\"Crashed by coordinate for crashes on dangerous roads only (zoomed in)\") #visualize for crashes on dangerous roads only", "-", "-  non_dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] != 'DIVIDED - W/MEDIAN (NOT RAISED)') & (cropped_df['TRAFFICWAY_TYPE'] !=  'DIVIDED - W/MEDIAN BARRIER') & (cropped_df['TRAFFICWAY_TYPE'] != 'FOUR_WAY') & (cropped_df['TRAFFICWAY_TYPE'] != 'T-INTERSECTION') & (cropped_df['TRAFFICWAY_TYPE'] !=  'CENTER TURN LANE') & (cropped_df['TRAFFICWAY_TYPE'] !=  'Y-INTERSECTION')]", "-  plot_octants(non_dangerous_roads,\"Crashed by coordinate for crashes on non-dangerous roads only (zoomed in)\") #visualize for crashes on nondangerous roads only", "-", "-  for i in range(0, 100, 10):", "-    print(i)", "-    speeds = cropped_df[(cropped_df['POSTED_SPEED_LIMIT'] > i) & (cropped_df['POSTED_SPEED_LIMIT'] <= (i + 10))]", "-    try:", "-      plot_octants(speeds,\"Crashed by coordinate for crashes on roads with \" + str(i) + \"-\" + str(i+10) + \" mph speed limts  (zoomed in)\")", "-    except:", "-      print(\"No entries with this range of speed limits\")"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+def spurious_corrs(df, show_plots=False):"], "sub": ["-def spurious_corrs(df):"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:41:28 2021 -0600", "msg": "1638124888.4271302_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+def spurious_corrs(df, show_plots=False):"], "sub": ["-def spurious_corrs(df):"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1638124556.590095 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:39:48 2021 -0600", "msg": "1638124556.590095_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1638124556.590095 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1638124533.9660459 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:35:46 2021 -0600", "msg": "1638124533.9660459_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1638124533.9660459 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+  #replace missing vals/errors in these columns with median (for numerical)", "+  #replace missing/spurious values for long/lata with random vals in range of known lats/longs", "+  #replace missing vals/semantic errors in these cols with most common value (for categorical)", "+  return df"], "sub": ["-    print(val)", "-    print(val)", "-", "-  #replace some with median (for numerical)", "-  lat_mean = df[\"LATITUDE\"].mean()", "-  lat_std = df['LATITUDE'].std()", "-  # lat_med = df[\"LATITUDE\"].median()", "-  # long_med = df[\"LONGITUDE\"].median()", "-  # df = df.replace({'LATITUDE': 0}, lat_med)", "-  # df = df.replace({'LONGITUDE': 0}, long_med)", "-  # df['LATITUDE'] = df['LATITUDE'].fillna(lat_med)", "-  # df['LONGITUDE'] = df['LONGITUDE'].fillna(long_med)", "-  #replace missing/spurious values for long/lata with random vals", "-  #replace remaining with most common (for categorical)", "-  return df #demo", "-"]}, {"files": "diff --git a/explore/plot_4.py b/explore/plot_4.py", "add": ["+  # print(long_quadrants)", "+  # print(lat_quadrants)"], "sub": ["-  print(long_quadrants)", "-  print(lat_quadrants)"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  # print(long_quadrants)", "+  # print(lat_quadrants)"], "sub": ["-  print(long_quadrants)", "-  print(lat_quadrants)"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:35:33 2021 -0600", "msg": "1638124533.9660459_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  # print(long_quadrants)", "+  # print(lat_quadrants)"], "sub": ["-  print(long_quadrants)", "-  print(lat_quadrants)"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638124341.176244 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  # print(df['FIRST_CRASH_TYPE'].unique())", "+  # print(df['ALIGNMENT'].unique())", "+  # print(df['CRASH_TYPE'].unique())", "+  # print(df['DAMAGE'].unique())", "+  # print(df['STREET_NO'].unique())", "+  # print(df['STREET_NAME'].unique())", "+  # print(\"Weather condition counts\")", "+  # print(df['WEATHER_CONDITION'].value_counts())", "+  # print(\"Lighting condition counts\")", "+  # print(df['LIGHTING_CONDITION'].value_counts())", "+  # print(\"Trafficway type counts\")", "+  # print(df['TRAFFICWAY_TYPE'].value_counts())", "+  # print(\"Roadway surface counts\")", "+  # print(df['ROADWAY_SURFACE_COND'].value_counts())", "+  # print(\"Most severe\")", "+  # print(df['MOST_SEVERE_INJURY'].value_counts())", "+  # print('Zero entries speed lim - ', (df['POSTED_SPEED_LIMIT'] == 0).sum())", "+  # print('na entries lat -',df['LATITUDE'].isna().sum())", "+  # print('na entries long -',df['LONGITUDE'].isna().sum())", "+  # print('Zero entries lat - ', (df['LATITUDE'] == 0).sum())", "+  # print('Zero entries long - ', (df['LONGITUDE'] == 0).sum())", "+  # print('Unknown entires roadway surf - ', (df['ROADWAY_SURFACE_COND'] == 'UNKNOWN').sum())"], "sub": ["-  print(df['FIRST_CRASH_TYPE'].unique())", "-  print(df['ALIGNMENT'].unique())", "-  print(df['CRASH_TYPE'].unique())", "-  print(df['DAMAGE'].unique())", "-  print(df['STREET_NO'].unique())", "-  print(df['STREET_NAME'].unique())", "-  print(\"Weather condition counts\")", "-  print(df['WEATHER_CONDITION'].value_counts())", "-  print(\"Lighting condition counts\")", "-  print(df['LIGHTING_CONDITION'].value_counts())", "-  print(\"Trafficway type counts\")", "-  print(df['TRAFFICWAY_TYPE'].value_counts())", "-  print(\"Roadway surface counts\")", "-  print(df['ROADWAY_SURFACE_COND'].value_counts())", "-  print(\"Most severe\")", "-  print(df['MOST_SEVERE_INJURY'].value_counts())", "-  print('Zero entries speed lim - ', (df['POSTED_SPEED_LIMIT'] == 0).sum())", "-  print('na entries lat -',df['LATITUDE'].isna().sum())", "-  print('na entries long -',df['LONGITUDE'].isna().sum())", "-  print('Zero entries lat - ', (df['LATITUDE'] == 0).sum())", "-  print('Zero entries long - ', (df['LONGITUDE'] == 0).sum())", "-  print('Unknown entires roadway surf - ', (df['ROADWAY_SURFACE_COND'] == 'UNKNOWN').sum())"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:33:16 2021 -0600", "msg": "1638124341.176244_end"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  # print(df['FIRST_CRASH_TYPE'].unique())", "+  # print(df['ALIGNMENT'].unique())", "+  # print(df['CRASH_TYPE'].unique())", "+  # print(df['DAMAGE'].unique())", "+  # print(df['STREET_NO'].unique())", "+  # print(df['STREET_NAME'].unique())", "+  # print(\"Weather condition counts\")", "+  # print(df['WEATHER_CONDITION'].value_counts())", "+  # print(\"Lighting condition counts\")", "+  # print(df['LIGHTING_CONDITION'].value_counts())", "+  # print(\"Trafficway type counts\")", "+  # print(df['TRAFFICWAY_TYPE'].value_counts())", "+  # print(\"Roadway surface counts\")", "+  # print(df['ROADWAY_SURFACE_COND'].value_counts())", "+  # print(\"Most severe\")", "+  # print(df['MOST_SEVERE_INJURY'].value_counts())", "+  # print('Zero entries speed lim - ', (df['POSTED_SPEED_LIMIT'] == 0).sum())", "+  # print('na entries lat -',df['LATITUDE'].isna().sum())", "+  # print('na entries long -',df['LONGITUDE'].isna().sum())", "+  # print('Zero entries lat - ', (df['LATITUDE'] == 0).sum())", "+  # print('Zero entries long - ', (df['LONGITUDE'] == 0).sum())", "+  # print('Unknown entires roadway surf - ', (df['ROADWAY_SURFACE_COND'] == 'UNKNOWN').sum())"], "sub": ["-  print(df['FIRST_CRASH_TYPE'].unique())", "-  print(df['ALIGNMENT'].unique())", "-  print(df['CRASH_TYPE'].unique())", "-  print(df['DAMAGE'].unique())", "-  print(df['STREET_NO'].unique())", "-  print(df['STREET_NAME'].unique())", "-  print(\"Weather condition counts\")", "-  print(df['WEATHER_CONDITION'].value_counts())", "-  print(\"Lighting condition counts\")", "-  print(df['LIGHTING_CONDITION'].value_counts())", "-  print(\"Trafficway type counts\")", "-  print(df['TRAFFICWAY_TYPE'].value_counts())", "-  print(\"Roadway surface counts\")", "-  print(df['ROADWAY_SURFACE_COND'].value_counts())", "-  print(\"Most severe\")", "-  print(df['MOST_SEVERE_INJURY'].value_counts())", "-  print('Zero entries speed lim - ', (df['POSTED_SPEED_LIMIT'] == 0).sum())", "-  print('na entries lat -',df['LATITUDE'].isna().sum())", "-  print('na entries long -',df['LONGITUDE'].isna().sum())", "-  print('Zero entries lat - ', (df['LATITUDE'] == 0).sum())", "-  print('Zero entries long - ', (df['LONGITUDE'] == 0).sum())", "-  print('Unknown entires roadway surf - ', (df['ROADWAY_SURFACE_COND'] == 'UNKNOWN').sum())"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  for i in range(0, 100, 10):"], "sub": ["-  for i in range(0, 90, 10):"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:32:21 2021 -0600", "msg": "1638124341.176244_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  for i in range(0, 100, 10):"], "sub": ["-  for i in range(0, 90, 10):"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638124264.138029 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  #investigating further to find how missing vals are represented for cases in whihc it wasn't clear above", "+  #trying to find a reasonable replacaement for these ones by examining distribution of values", "+"], "sub": ["-  #investigating further to find potential missing vals for cases in whihc it wasn't clear above", "-  #trying to find a reasonable replacaement for these ones", "-"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:32:07 2021 -0600", "msg": "1638124264.138029_end"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  #investigating further to find how missing vals are represented for cases in whihc it wasn't clear above", "+  #trying to find a reasonable replacaement for these ones by examining distribution of values", "+"], "sub": ["-  #investigating further to find potential missing vals for cases in whihc it wasn't clear above", "-  #trying to find a reasonable replacaement for these ones", "-"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    try:", "+      plot_octants(speeds,\"Crashed by coordinate for crashes on roads with \" + str(i) + \"-\" + str(i+10) + \" mph speed limts  (zoomed in)\")", "+    except:", "+      print(\"No entries with this range of speed limits\")", "+"], "sub": ["-    plot_octants(speeds,\"Crashed by coordinate for crashes on roads with \" + str(i) + \"-\" + str(i+10) + \" mph speed limts  (zoomed in)\")", "-"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:31:04 2021 -0600", "msg": "1638124264.138029_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    try:", "+      plot_octants(speeds,\"Crashed by coordinate for crashes on roads with \" + str(i) + \"-\" + str(i+10) + \" mph speed limts  (zoomed in)\")", "+    except:", "+      print(\"No entries with this range of speed limits\")", "+"], "sub": ["-    plot_octants(speeds,\"Crashed by coordinate for crashes on roads with \" + str(i) + \"-\" + str(i+10) + \" mph speed limts  (zoomed in)\")", "-"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638124148.163081 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:30:26 2021 -0600", "msg": "1638124148.163081_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638124148.163081 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(i)"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:29:08 2021 -0600", "msg": "1638124148.163081_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(i)"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638124058.366905 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:28:24 2021 -0600", "msg": "1638124058.366905_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638124058.366905 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  #count aand print frequencies of crashes on dangerous or defective roads per region (just for inspection)", "+  defective = cropped_df[cropped_df['ROAD_DEFECT'] != 'NO DEFECTS']", "+  plot_octants(defective, \"Crashed by coordinate for crashes on defective roads only (zoomed in)\") #visualize for crashes on defective roads only", "+", "+  plot_octants(non_dangerous_roads,\"Crashed by coordinate for crashes on non-dangerous roads only (zoomed in)\") #visualize for crashes on nondangerous roads only", "+", "+  for i in range(0, 90, 10):", "+    speeds = cropped_df[(cropped_df['POSTED_SPEED_LIMIT'] > i) & (cropped_df['POSTED_SPEED_LIMIT'] <= (i + 10))]", "+    plot_octants(speeds,\"Crashed by coordinate for crashes on roads with \" + str(i) + \"-\" + str(i+10) + \" mph speed limts  (zoomed in)\")", "+", "+"], "sub": ["-  #count aand print frequencies of crashes on dangerous or defective roads per region", "-  plot_octants(non_dangerous_roads,\"Crashed by coordinate for crashes on non-dangerous roads only (zoomed in)\") #visualize for crashes on dangerous roads only"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:27:38 2021 -0600", "msg": "1638124058.366905_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  #count aand print frequencies of crashes on dangerous or defective roads per region (just for inspection)", "+  defective = cropped_df[cropped_df['ROAD_DEFECT'] != 'NO DEFECTS']", "+  plot_octants(defective, \"Crashed by coordinate for crashes on defective roads only (zoomed in)\") #visualize for crashes on defective roads only", "+", "+  plot_octants(non_dangerous_roads,\"Crashed by coordinate for crashes on non-dangerous roads only (zoomed in)\") #visualize for crashes on nondangerous roads only", "+", "+  for i in range(0, 90, 10):", "+    speeds = cropped_df[(cropped_df['POSTED_SPEED_LIMIT'] > i) & (cropped_df['POSTED_SPEED_LIMIT'] <= (i + 10))]", "+    plot_octants(speeds,\"Crashed by coordinate for crashes on roads with \" + str(i) + \"-\" + str(i+10) + \" mph speed limts  (zoomed in)\")", "+", "+"], "sub": ["-  #count aand print frequencies of crashes on dangerous or defective roads per region", "-  plot_octants(non_dangerous_roads,\"Crashed by coordinate for crashes on non-dangerous roads only (zoomed in)\") #visualize for crashes on dangerous roads only"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638123605.411705 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:20:43 2021 -0600", "msg": "1638123605.411705_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638123605.411705 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] != 'DIVIDED - W/MEDIAN (NOT RAISED)') & (cropped_df['TRAFFICWAY_TYPE'] !=  'DIVIDED - W/MEDIAN BARRIER') & (cropped_df['TRAFFICWAY_TYPE'] != 'FOUR_WAY') & (cropped_df['TRAFFICWAY_TYPE'] != 'T-INTERSECTION') & (cropped_df['TRAFFICWAY_TYPE'] !=  'CENTER TURN LANE') & (cropped_df['TRAFFICWAY_TYPE'] !=  'Y-INTERSECTION')]"], "sub": ["-  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:20:05 2021 -0600", "msg": "1638123605.411705_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] != 'DIVIDED - W/MEDIAN (NOT RAISED)') & (cropped_df['TRAFFICWAY_TYPE'] !=  'DIVIDED - W/MEDIAN BARRIER') & (cropped_df['TRAFFICWAY_TYPE'] != 'FOUR_WAY') & (cropped_df['TRAFFICWAY_TYPE'] != 'T-INTERSECTION') & (cropped_df['TRAFFICWAY_TYPE'] !=  'CENTER TURN LANE') & (cropped_df['TRAFFICWAY_TYPE'] !=  'Y-INTERSECTION')]"], "sub": ["-  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638123559.1788118 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:19:19 2021 -0600", "msg": "1638123559.1788118_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638123559.1788118 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"], "sub": ["-  non_dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:19:19 2021 -0600", "msg": "1638123559.1788118_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"], "sub": ["-  non_dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]"], "sub": ["-  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:19:04 2021 -0600", "msg": "1638123544.730381_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]"], "sub": ["-  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638123515.995407 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:18:36 2021 -0600", "msg": "1638123515.995407_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638123515.995407 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"], "sub": ["-  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') | (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:18:36 2021 -0600", "msg": "1638123515.995407_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"], "sub": ["-  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') | (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638123455.862956 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:17:36 2021 -0600", "msg": "1638123455.862956_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638123455.862956 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') | (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"], "sub": ["-  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "-                                (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "-                                | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "-                                (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:17:35 2021 -0600", "msg": "1638123455.862956_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') | (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')  | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') | (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"], "sub": ["-  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "-                                (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "-                                | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "-                                (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638123412.5648189 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:16:52 2021 -0600", "msg": "1638123412.5648189_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638123412.5648189 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  return df", "+def plot_octants(df, title):", "+  fig.suptitle(title)", "+  I consider a dangerous road to be a four way, divided (any type), T-Intersection, Center turn lane,", "+  Y-Intersection", "+", "+  #count aand print frequencies of crashes on dangerous or defective roads per region", "+  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS']", "+  plot_octants(non_defective, \"Crashed by coordinate for crashes on non-defective roads only (zoomed in)\") #visualize for crashes on non-defective roads only", "+  plot_octants(dangerous_roads,\"Crashed by coordinate for crashes on dangerous roads only (zoomed in)\") #visualize for crashes on dangerous roads only", "+  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "+                                (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "+                                | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "+                                (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]", "+  plot_octants(non_dangerous_roads,\"Crashed by coordinate for crashes on non-dangerous roads only (zoomed in)\") #visualize for crashes on dangerous roads only", "+#The main() function  of this program", "+    #analyze potentially spurious correlations"], "sub": ["-", "-  #get min/max lats/longs", "-  no_zero_lat = df.drop(df[df['LATITUDE'] == 0].index)", "-  MIN_LAT = min(no_zero_lat['LATITUDE'])", "-  MAX_LAT = max(df['LATITUDE'])", "-  no_zero_long = df.drop(df[df['LONGITUDE'] == 0].index)", "-  MIN_LONG = min(no_zero_long['LONGITUDE'])", "-  MAX_LONG = max(no_zero_long['LONGITUDE'])", "-  print(MAX_LONG)", "-", "-  return df #demo", "-def plot_octants(df):", "-  fig.suptitle(\"Crashes by coordinate\")", "-  I consider a dangerous road to be a ffour waaya, divided (any type), T-Intersection, Center turn lane,", "-   five point, YIntersection, or ramp trafficway", "-  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS'] #no road defects only", "-  plot_octants(non_defective)", "-  plot_octants(dangerous_roads)", "-#The main() function  of this program", "-    #analyze how"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 12:16:52 2021 -0600", "msg": "1638123412.5648189_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  return df", "+def plot_octants(df, title):", "+  fig.suptitle(title)", "+  I consider a dangerous road to be a four way, divided (any type), T-Intersection, Center turn lane,", "+  Y-Intersection", "+", "+  #count aand print frequencies of crashes on dangerous or defective roads per region", "+  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS']", "+  plot_octants(non_defective, \"Crashed by coordinate for crashes on non-defective roads only (zoomed in)\") #visualize for crashes on non-defective roads only", "+  plot_octants(dangerous_roads,\"Crashed by coordinate for crashes on dangerous roads only (zoomed in)\") #visualize for crashes on dangerous roads only", "+  non_dangerous_roads = cropped_df[!((cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "+                                (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "+                                | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "+                                (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION'))]", "+  plot_octants(non_dangerous_roads,\"Crashed by coordinate for crashes on non-dangerous roads only (zoomed in)\") #visualize for crashes on dangerous roads only", "+#The main() function  of this program", "+    #analyze potentially spurious correlations"], "sub": ["-", "-  #get min/max lats/longs", "-  no_zero_lat = df.drop(df[df['LATITUDE'] == 0].index)", "-  MIN_LAT = min(no_zero_lat['LATITUDE'])", "-  MAX_LAT = max(df['LATITUDE'])", "-  no_zero_long = df.drop(df[df['LONGITUDE'] == 0].index)", "-  MIN_LONG = min(no_zero_long['LONGITUDE'])", "-  MAX_LONG = max(no_zero_long['LONGITUDE'])", "-  print(MAX_LONG)", "-", "-  return df #demo", "-def plot_octants(df):", "-  fig.suptitle(\"Crashes by coordinate\")", "-  I consider a dangerous road to be a ffour waaya, divided (any type), T-Intersection, Center turn lane,", "-   five point, YIntersection, or ramp trafficway", "-  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS'] #no road defects only", "-  plot_octants(non_defective)", "-  plot_octants(dangerous_roads)", "-#The main() function  of this program", "-    #analyze how"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638122063.0610838 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:54:44 2021 -0600", "msg": "1638122063.0610838_end"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "+                                (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "+                                | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "+                                (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]", "+  plot_octants(dangerous_roads)"], "sub": ["-"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:54:23 2021 -0600", "msg": "1638122063.0610838_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  dangerous_roads = cropped_df[(cropped_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (cropped_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "+                                (cropped_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (cropped_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "+                                | (cropped_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (cropped_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "+                                (cropped_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (cropped_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]", "+  plot_octants(dangerous_roads)"], "sub": ["-"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638121942.135247 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS'] #no road defects only"], "sub": ["-  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS']"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:52:59 2021 -0600", "msg": "1638121942.135247_end"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS'] #no road defects only"], "sub": ["-  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS']"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(\"Number of crashes on defective roads in region \" + str(j) + \":\", defect_count)", "+    print(\"Number of crashes dangerous trafficway types in region \" + str(j) + \":\", danger_count)"], "sub": ["-    print(\"Number of crashes on defective roads in this region: \", defect_count)", "-    print(\"Number of crashes dangerous trafficway types in this region: \", danger_count)"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:52:22 2021 -0600", "msg": "1638121942.135247_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(\"Number of crashes on defective roads in region \" + str(j) + \":\", defect_count)", "+    print(\"Number of crashes dangerous trafficway types in region \" + str(j) + \":\", danger_count)"], "sub": ["-    print(\"Number of crashes on defective roads in this region: \", defect_count)", "-    print(\"Number of crashes dangerous trafficway types in this region: \", danger_count)"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638121771.6775548 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:51:27 2021 -0600", "msg": "1638121771.6775548_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638121771.6775548 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+from matplotlib.ticker import FormatStrFormatter"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:49:31 2021 -0600", "msg": "1638121771.6775548_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+from matplotlib.ticker import FormatStrFormatter"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638121746.3878279 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:49:18 2021 -0600", "msg": "1638121746.3878279_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638121746.3878279 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  plot_octants(non_defective)"], "sub": ["-  plot_octants(non_defective, True)"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:49:06 2021 -0600", "msg": "1638121746.3878279_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  plot_octants(non_defective)"], "sub": ["-  plot_octants(non_defective, True)"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1638121704.085366 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:48:35 2021 -0600", "msg": "1638121704.085366_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1638121704.085366 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.[y , True, 1638121700.599417 , error_code: 2"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:48:20 2021 -0600", "msg": "1638121700.599417_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.[y , True, 1638121700.599417 , error_code: 2"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+import numpy as np", "+MIN_LAT = 41.644670132", "+MAX_LAT = 42.022779861", "+MIN_LONG = -87.93587692", "+MAX_LONG = -87.52458738700001", "+", "+def replace_with_random_lat(val):", "+  if np.isnan(val) or val == 0:", "+    val = (np.random.rand() * (MAX_LAT - MIN_LAT)) + MIN_LAT", "+    print(val)", "+def replace_with_random_long(val):", "+  if np.isnan(val) or val == 0:", "+    val = (np.random.rand() * (MAX_LONG - MIN_LONG)) + MIN_LONG", "+    print(val)", "+  return val", "+", "+", "+  df['INJURIES_NON_INCAPACITATING'] = df['INJURIES_NON_INCAPACITATING'].fillna(df['INJURIES_NON_INCAPACITATING'].median())", "+  df['LATITUDE'] = df['LATITUDE'].apply(replace_with_random_lat)", "+  df['LONGITUDE'] = df['LONGITUDE'].apply(replace_with_random_long)"], "sub": ["-", "-def replace_with_random(mean, std, val):", "-  if np.isnan(val):", "-    val = np.random()", "-  df['INJURIES_NON_INCAsPACITATING'] = df['INJURIES_NON_INCAPACITATING'].fillna(df['INJURIES_NON_INCAPACITATING'].median())", "-  df['LATITUDE'] = df['LATITUDE'].apply(replace_with_random)"]}, {"files": "diff --git a/explore/plot_2.py b/explore/plot_2.py", "add": ["+"], "sub": ["-    #df = df.groupby(\"WEATHER_CONDITION\").filter(lambda x: len(x) > 1000)"]}, {"files": "diff --git a/explore/plot_3.png b/explore/plot_3.png", "add": [], "sub": []}, {"files": "diff --git a/explore/plot_3.py b/explore/plot_3.py", "add": ["+\tfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(20, 14))", "+", "+\taxes[0].tick_params(axis='x', labelrotation= 90, labelsize=6)", "+\taxes[0].set_xlabel('Weather condition')", "+\taxes[0].set_ylabel('Percentage of crashes per injury severity')", "+\taxes[0].set_title('Weather effect on crash severity')", "+\tnew_df.plot.bar(ax=axes[0], stacked=True, legend=False)", "+", "+", "+", "+\tindex = df['LIGHTING_CONDITION'].unique()", "+\tnew_df = pd.DataFrame({}, index=index)", "+", "+\tfor el in injury_severities:", "+\t\tnew_df[el + \"_COUNT\"] = df[df[\"MOST_SEVERE_INJURY\"] == el]['LIGHTING_CONDITION'].value_counts()", "+\t\tnew_df[el + \"_COUNT\"] = new_df[el + \"_COUNT\"].fillna(0)", "+\tnew_df = new_df.div(new_df.sum(axis=1), axis=0)", "+\tprint(new_df)", "+", "+\tplt.rcParams[\"figure.figsize\"] = (10,10)", "+\taxes[1].tick_params(axis='x', labelrotation= 90, labelsize=6)", "+\taxes[1].set_xlabel('Lighting condition')", "+\taxes[1].set_title('Lighting effect on crash severity')", "+\tnew_df.plot.bar(ax=axes[1], stacked=True)", "+\tindex = df['ROADWAY_SURFACE_COND'].unique()", "+\tnew_df = pd.DataFrame({}, index=index)", "+", "+\tfor el in injury_severities:", "+\t\tnew_df[el + \"_COUNT\"] = df[df[\"MOST_SEVERE_INJURY\"] == el]['ROADWAY_SURFACE_COND'].value_counts()", "+\t\tnew_df[el + \"_COUNT\"] = new_df[el + \"_COUNT\"].fillna(0)", "+\tnew_df = new_df.div(new_df.sum(axis=1), axis=0)", "+\tprint(new_df)", "+\taxes[2].tick_params(axis='x', labelrotation= 90, labelsize=6)", "+\taxes[2].set_xlabel('Roadway surface condition')", "+\taxes[2].set_title('Roadway surface effect on crash severity')", "+\tnew_df.plot.bar(ax=axes[2], stacked=True, legend=False)", "+", "+", "+", "+\tplt.savefig('plot_3.png')", "+", "+", "+"], "sub": ["-\t#print(df['MOST_SEVERE_INJURY'] == 'NO INDICATION OF INJURY')", "-\tdf['INJURY_CODE'] = (df['MOST_SEVERE_INJURY'] == 'NO INDICATION OF INJURY')* 1", "-\tdf['INJURY_CODE'] = df['INJURY_CODE'] + (df['MOST_SEVERE_INJURY'] == 'REPORTED, NOT EVIDENT') * 2", "-\tdf['INJURY_CODE'] = df['INJURY_CODE'] + (df['MOST_SEVERE_INJURY'] == 'NONINCAPACITATING INJURY') * 3", "-\tdf['INJURY_CODE'] = df['INJURY_CODE'] + (df['MOST_SEVERE_INJURY'] == 'INCAPACITATING INJURY') * 4", "-\tdf['INJURY_CODE'] = df['INJURY_CODE'] + (df['MOST_SEVERE_INJURY'] == 'FATAL') * 5", "-\tavg_injury_severities = []", "-\tconds = df['WEATHER_CONDITION'].unique()", "-\tfor cond in conds:", "-\t\tavg_injury_severities.append(df[df[\"WEATHER_CONDITION\"] == cond]['INJURY_CODE'].mean())", "-\t# sev_df = pd.DataFrame({\"Avg_Injury_Severity\": avg_injury_severities}, index=conds)", "-\t# sev_df.plot.bar()", "-\t# plt.show()", "-\t# plt.scatter(df['WEATHER_CONDITION'], df['INJURY_CODE'], alpha=0.1)", "-\t# plt.xlabel('Weather condition')", "-\t# plt.ylabel('Most severe injury severity')", "-\t# plt.show()", "-\t\t#new_df[el + \"_COUNT\"] = new_df[el + \"_COUNT\"] / (df[\"MOST_SEVERE_INJURY\"] == el).sum()", "-\tnew_df.plot.bar(stacked=True)", "-\tplt.savefig('plot_3.png')", "-\tplt.show()", "-\tnew_df2 = pd.DataFrame({}, index=index)", "-\tdamages = df['DAMAGE'].unique()", "-\tfor el in damages:", "-\t\tnew_df2[el + \"_COUNT\"] = df[df[\"DAMAGE\"] == el]['WEATHER_CONDITION'].value_counts()", "-\t\tnew_df2[el + \"_COUNT\"] = new_df2[el + \"_COUNT\"].fillna(0)", "-\t\t#new_df[el + \"_COUNT\"] = new_df[el + \"_COUNT\"] / (df[\"MOST_SEVERE_INJURY\"] == el).sum()", "-\tnew_df2 = new_df2.div(new_df2.sum(axis=1), axis=0)", "-\tprint(new_df2)", "-\tnew_df2.plot.bar(stacked=True)", "-\t# all_counts = []", "-\t# for cond in index:", "-\t# \tcounts = df[df[\"WEATHER_CONDITION\"] == cond]['MOST_SEVERE_INJURY'].value_counts()", "-\t# \tprint(counts)", "-\t# \tall_counts.append(counts)", "-\t# all_counts = np.array(all_counts)", "-\t# new_df = pd.DataFrame(all_counts, columns=injury_severities, index=index)", "-\t# print(new_df)"]}, {"files": "diff --git a/explore/plot_4-og.png b/explore/plot_4-og.png", "add": [], "sub": []}, {"files": "diff --git a/explore/plot_4.png b/explore/plot_4.png", "add": [], "sub": []}, {"files": "diff --git a/explore/plot_4.py b/explore/plot_4.py", "add": ["+from matplotlib.ticker import FormatStrFormatter", "+", "+def plot_octants(df, cropped=False):", "+  '''plot(df) takes as input a clean dataframe and generates 16 subplots of equally sized regions", "+  fig, axes = plt.subplots(4, 4, figsize=(10, 10))", "+", "+", "+  for j in range(16):", "+  \tlat_min = lat_quadrants[(j % 4)]", "+  \tlat_max = lat_quadrants[(j % 4) + 1]", "+  \tlong_min = long_quadrants[int(j/4)]", "+  \tlong_max = long_quadrants[int(j/4) + 1]", "+", "+  \tquadrant_lats = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] < lat_max)]['LATITUDE']", "+  \tquadrant_longs = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] <  lat_max)]['LONGITUDE']", "+  \taxes[(3 - (j % 4)), int(j/4)].scatter(quadrant_longs, quadrant_lats, alpha=0.01)", "+  \taxes[(3 - (j % 4)), int(j/4)].xaxis.set_major_formatter(FormatStrFormatter('%.2f'))", "+", "+", "+", "+  fig.text(0.5, 0.04, 'Longitude', ha='center', va='center')", "+  fig.text(0.06, 0.5, 'Latitude', ha='center', va='center', rotation='vertical')", "+", "+", "+  if cropped:", "+  \tfig.suptitle(\"Crashes by coordinate (zoomed into regions of interest)\")", "+  \tfig.savefig('plot_4.png')", "+  else:", "+  \tfig.suptitle(\"Crashes by coordinate\")", "+  \tfig.savefig('plot_4-og.png')", "+", "+", "+  return None", "+", "+", "+    plot_octants(cdf)", "+", "+    #crop to regions of interest in Chicago", "+    new_cdf = cdf[(cdf['LONGITUDE'] > -87.83305453675) & (cdf['LATITUDE'] > 41.73919756425)]", "+    plot_octants(new_cdf, True)", "+"], "sub": ["-def plot(df):", "-  '''plot(df) takes as input a clean dataframe and generates a plot. The", "-  style of the plot and variables are up to you.", "-  fig, axes = plt.subplots(2, 2, figsize=(10, 10))", "-  print(axes)", "-", "-  for j in range(4):", "-  \taxes[int(j > 1), (j % 2)].scatter(df[(df['LONGITUDE'] >  long_quadrants[j]) & (df['LONGITUDE'] < long_quadrants[j+1])]['LATITUDE'], df[(df['LONGITUDE'] > long_quadrants[j]) & (df['LONGITUDE'] < long_quadrants[j+1])]['LONGITUDE'], alpha=0.1)", "-  \tprint(df[(df['LONGITUDE'] >  long_quadrants[j]) & (df['LONGITUDE'] < long_quadrants[j+1])]['LATITUDE'].count())", "-  # plt.xticks(np.arange(min(df['LATITUDE']), max(df['LATITUDE'])+.01, 0.01))", "-  # plt.yticks(np.arange(min(df['LONGITUDE']), max(df['LONGITUDE'])+.01, 0.01))", "-  return None", "-    plot(cdf)", "-    plt.savefig('plot_4.png')"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+", "+", "+  #get min/max lats/longs", "+  no_zero_lat = df.drop(df[df['LATITUDE'] == 0].index)", "+  MIN_LAT = min(no_zero_lat['LATITUDE'])", "+  MAX_LAT = max(df['LATITUDE'])", "+  no_zero_long = df.drop(df[df['LONGITUDE'] == 0].index)", "+  MIN_LONG = min(no_zero_long['LONGITUDE'])", "+  MAX_LONG = max(no_zero_long['LONGITUDE'])", "+  print(MAX_LONG)", "+", "+", "+def plot_3():", "+  \"\"\"Scratch for plot_3.py", "+  \"\"\"", "+", "+  #i considered representing the severity according to damage levels", "+  new_df2 = pd.DataFrame({}, index=index)", "+  damages = df['DAMAGE'].unique()", "+  for el in damages:", "+    new_df2[el + \"_COUNT\"] = df[df[\"DAMAGE\"] == el]['WEATHER_CONDITION'].value_counts()", "+    new_df2[el + \"_COUNT\"] = new_df2[el + \"_COUNT\"].fillna(0)", "+    #new_df[el + \"_COUNT\"] = new_df[el + \"_COUNT\"] / (df[\"MOST_SEVERE_INJURY\"] == el).sum()", "+  new_df2 = new_df2.div(new_df2.sum(axis=1), axis=0)", "+  print(new_df2)", "+", "+  plt.rcParams[\"figure.figsize\"] = (10,10)", "+  new_df2.plot.bar(stacked=True)", "+", "+", "+  plt.show()", "+", "+", "+def plot_quadrants(df):", "+  '''plot(df) takes as input a clean dataframe and generates 4 plots.", "+  fig, axes = plt.subplots(2, 2, figsize=(10, 10))", "+  print(axes)", "+", "+  lat_range = max(df['LATITUDE']) - min(df['LATITUDE'])", "+  min_lat = min(df['LATITUDE'])", "+  min_long = min(df['LONGITUDE'])", "+  long_range = max(df['LONGITUDE']) - min_long", "+  long_quadrants = [min_long + i*(long_range / 2) for i in range(2)]", "+  long_quadrants.append(max(df['LONGITUDE']))", "+  lat_quadrants = [min_lat + i*(lat_range / 2) for i in range(2)]", "+  lat_quadrants.append(max(df['LATITUDE']))", "+  print(long_quadrants)", "+  print(lat_quadrants)", "+  for j in range(4):", "+    lat_min = lat_quadrants[(j % 2)]", "+    lat_max = lat_quadrants[(j % 2) + 1]", "+    print(lat_min)", "+    print(lat_max)", "+    long_min = long_quadrants[int(j > 1)]", "+    long_max = long_quadrants[int(j > 1) + 1]", "+    print(long_min)", "+    print(long_max)", "+    quadrant_lats = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] < lat_max)]['LATITUDE']", "+    quadrant_longs = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] <  lat_max)]['LONGITUDE']", "+    axes[int(j <= 1), (j % 2)].scatter(quadrant_lats, quadrant_longs, alpha=0.01)", "+    print(quadrant_longs.count())", "+  # plt.xticks(np.arange(min(df['LATITUDE']), max(df['LATITUDE'])+.01, 0.01))", "+  # plt.yticks(np.arange(min(df['LONGITUDE']), max(df['LONGITUDE'])+.01, 0.01))", "+  plt.show()", "+def plot_octants(df):", "+  '''plot(df) takes as input a clean dataframe and generates 16 subplots of equally sized regions", "+  '''", "+  fig, axes = plt.subplots(4, 4, figsize=(10, 10))", "+", "+", "+  lat_range = max(df['LATITUDE']) - min(df['LATITUDE'])", "+  min_lat = min(df['LATITUDE'])", "+  min_long = min(df['LONGITUDE'])", "+  long_range = max(df['LONGITUDE']) - min_long", "+  long_quadrants = [min_long + i*(long_range / 4) for i in range(4)]", "+  long_quadrants.append(max(df['LONGITUDE']))", "+  lat_quadrants = [min_lat + i*(lat_range / 4) for i in range(4)]", "+  lat_quadrants.append(max(df['LATITUDE']))", "+  print(long_quadrants)", "+  print(lat_quadrants)", "+  for j in range(16):", "+    lat_min = lat_quadrants[(j % 4)]", "+    lat_max = lat_quadrants[(j % 4) + 1]", "+    long_min = long_quadrants[int(j/4)]", "+    long_max = long_quadrants[int(j/4) + 1]", "+", "+    quadrant_lats = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] < lat_max)]['LATITUDE']", "+    quadrant_longs = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] <  lat_max)]['LONGITUDE']", "+    axes[(3 - (j % 4)), int(j/4)].scatter(quadrant_longs, quadrant_lats, alpha=0.01)", "+    axes[(3 - (j % 4)), int(j/4)].xaxis.set_major_formatter(FormatStrFormatter('%.3f'))", "+", "+", "+  fig.suptitle(\"Crashes by coordinate\")", "+  fig.text(0.5, 0.04, 'Longitude', ha='center', va='center')", "+  fig.text(0.06, 0.5, 'Latitude', ha='center', va='center', rotation='vertical')", "+", "+  plt.show()", "+", "+", "+", "+", "+def spurious_corrs(df):", "+  '''scratch to aanalyze spurious correlations from question 4", "+  '''", "+  lat_range = max(df['LATITUDE']) - min(df['LATITUDE'])", "+  min_lat = min(df['LATITUDE'])", "+  min_long = min(df['LONGITUDE'])", "+  long_range = max(df['LONGITUDE']) - min_long", "+  long_quadrants = [min_long + i*(long_range / 4) for i in range(4)]", "+  long_quadrants.append(max(df['LONGITUDE']))", "+  lat_quadrants = [min_lat + i*(lat_range / 4) for i in range(4)]", "+  lat_quadrants.append(max(df['LATITUDE']))", "+", "+  '''", "+  Below I analyze the number of crashes occuring on dangerous or defective roads per region", "+  in an attempt to control for these variables in my analysis of crash frequencies per neighborhood.", "+  I consider a dangerous road to be a ffour waaya, divided (any type), T-Intersection, Center turn lane,", "+   five point, YIntersection, or ramp trafficway", "+  '''", "+  for j in range(16):", "+    lat_min = lat_quadrants[(j % 4)]", "+    lat_max = lat_quadrants[(j % 4) + 1]", "+    long_min = long_quadrants[int(j/4)]", "+    long_max = long_quadrants[int(j/4) + 1]", "+", "+    quadrant_df = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] < lat_max)]", "+    num_crashes = quadrant_df['LATITUDE'].count() #the total number of crashes in this region", "+    defect_count = quadrant_df[(quadrant_df['ROAD_DEFECT'] == \"RUT, HOLES\") | (quadrant_df['ROAD_DEFECT'] == \"WORN SURFACE\")  | (quadrant_df['ROAD_DEFECT'] == \"SHOULDER DEFECT\") | (quadrant_df['ROAD_DEFECT'] == \"DEBRIS ON ROADWAY\")]['ROAD_DEFECT'].count()", "+    print(\"Number of crashes on defective roads in this region: \", defect_count)", "+    danger_count = quadrant_df[(quadrant_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (quadrant_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "+                                (quadrant_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (quadrant_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "+                                | (quadrant_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (quadrant_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "+                                (quadrant_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (quadrant_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]['TRAFFICWAY_TYPE'].count()", "+    print(\"Number of crashes dangerous trafficway types in this region: \", danger_count)", "+", "+", "+", "+  #visualize frequencies while controlling for defect/road types", "+  cropped_df = df[(df['LONGITUDE'] > -87.83305453675) & (df['LATITUDE'] > 41.73919756425)]   #crop to regions of interest in Chicago", "+  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS']", "+  plot_octants(non_defective, True)", "+", "+", "+    #analyze how", "+    spurious_corrs(cdf)", "+"], "sub": ["-#TODO 2.", "-def plot(df):", "-  '''plot(df) takes as input a clean dataframe and generates a plot. The", "-  style of the plot and variables are up to you.", "-  #plt.scatter(df['A'],df['B'])", "-    plot(cdf)", "-    plt.show()"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sun Nov 28 11:48:20 2021 -0600", "msg": "1638121700.599417_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+", "+", "+  #get min/max lats/longs", "+  no_zero_lat = df.drop(df[df['LATITUDE'] == 0].index)", "+  MIN_LAT = min(no_zero_lat['LATITUDE'])", "+  MAX_LAT = max(df['LATITUDE'])", "+  no_zero_long = df.drop(df[df['LONGITUDE'] == 0].index)", "+  MIN_LONG = min(no_zero_long['LONGITUDE'])", "+  MAX_LONG = max(no_zero_long['LONGITUDE'])", "+  print(MAX_LONG)", "+", "+", "+def plot_3():", "+  \"\"\"Scratch for plot_3.py", "+  \"\"\"", "+", "+  #i considered representing the severity according to damage levels", "+  new_df2 = pd.DataFrame({}, index=index)", "+  damages = df['DAMAGE'].unique()", "+  for el in damages:", "+    new_df2[el + \"_COUNT\"] = df[df[\"DAMAGE\"] == el]['WEATHER_CONDITION'].value_counts()", "+    new_df2[el + \"_COUNT\"] = new_df2[el + \"_COUNT\"].fillna(0)", "+    #new_df[el + \"_COUNT\"] = new_df[el + \"_COUNT\"] / (df[\"MOST_SEVERE_INJURY\"] == el).sum()", "+  new_df2 = new_df2.div(new_df2.sum(axis=1), axis=0)", "+  print(new_df2)", "+", "+  plt.rcParams[\"figure.figsize\"] = (10,10)", "+  new_df2.plot.bar(stacked=True)", "+", "+", "+  plt.show()", "+", "+", "+def plot_quadrants(df):", "+  '''plot(df) takes as input a clean dataframe and generates 4 plots.", "+  fig, axes = plt.subplots(2, 2, figsize=(10, 10))", "+  print(axes)", "+", "+  lat_range = max(df['LATITUDE']) - min(df['LATITUDE'])", "+  min_lat = min(df['LATITUDE'])", "+  min_long = min(df['LONGITUDE'])", "+  long_range = max(df['LONGITUDE']) - min_long", "+  long_quadrants = [min_long + i*(long_range / 2) for i in range(2)]", "+  long_quadrants.append(max(df['LONGITUDE']))", "+  lat_quadrants = [min_lat + i*(lat_range / 2) for i in range(2)]", "+  lat_quadrants.append(max(df['LATITUDE']))", "+  print(long_quadrants)", "+  print(lat_quadrants)", "+  for j in range(4):", "+    lat_min = lat_quadrants[(j % 2)]", "+    lat_max = lat_quadrants[(j % 2) + 1]", "+    print(lat_min)", "+    print(lat_max)", "+    long_min = long_quadrants[int(j > 1)]", "+    long_max = long_quadrants[int(j > 1) + 1]", "+    print(long_min)", "+    print(long_max)", "+    quadrant_lats = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] < lat_max)]['LATITUDE']", "+    quadrant_longs = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] <  lat_max)]['LONGITUDE']", "+    axes[int(j <= 1), (j % 2)].scatter(quadrant_lats, quadrant_longs, alpha=0.01)", "+    print(quadrant_longs.count())", "+  # plt.xticks(np.arange(min(df['LATITUDE']), max(df['LATITUDE'])+.01, 0.01))", "+  # plt.yticks(np.arange(min(df['LONGITUDE']), max(df['LONGITUDE'])+.01, 0.01))", "+  plt.show()", "+def plot_octants(df):", "+  '''plot(df) takes as input a clean dataframe and generates 16 subplots of equally sized regions", "+  '''", "+  fig, axes = plt.subplots(4, 4, figsize=(10, 10))", "+", "+", "+  lat_range = max(df['LATITUDE']) - min(df['LATITUDE'])", "+  min_lat = min(df['LATITUDE'])", "+  min_long = min(df['LONGITUDE'])", "+  long_range = max(df['LONGITUDE']) - min_long", "+  long_quadrants = [min_long + i*(long_range / 4) for i in range(4)]", "+  long_quadrants.append(max(df['LONGITUDE']))", "+  lat_quadrants = [min_lat + i*(lat_range / 4) for i in range(4)]", "+  lat_quadrants.append(max(df['LATITUDE']))", "+  print(long_quadrants)", "+  print(lat_quadrants)", "+  for j in range(16):", "+    lat_min = lat_quadrants[(j % 4)]", "+    lat_max = lat_quadrants[(j % 4) + 1]", "+    long_min = long_quadrants[int(j/4)]", "+    long_max = long_quadrants[int(j/4) + 1]", "+", "+    quadrant_lats = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] < lat_max)]['LATITUDE']", "+    quadrant_longs = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] <  lat_max)]['LONGITUDE']", "+    axes[(3 - (j % 4)), int(j/4)].scatter(quadrant_longs, quadrant_lats, alpha=0.01)", "+    axes[(3 - (j % 4)), int(j/4)].xaxis.set_major_formatter(FormatStrFormatter('%.3f'))", "+", "+", "+  fig.suptitle(\"Crashes by coordinate\")", "+  fig.text(0.5, 0.04, 'Longitude', ha='center', va='center')", "+  fig.text(0.06, 0.5, 'Latitude', ha='center', va='center', rotation='vertical')", "+", "+  plt.show()", "+", "+", "+", "+", "+def spurious_corrs(df):", "+  '''scratch to aanalyze spurious correlations from question 4", "+  '''", "+  lat_range = max(df['LATITUDE']) - min(df['LATITUDE'])", "+  min_lat = min(df['LATITUDE'])", "+  min_long = min(df['LONGITUDE'])", "+  long_range = max(df['LONGITUDE']) - min_long", "+  long_quadrants = [min_long + i*(long_range / 4) for i in range(4)]", "+  long_quadrants.append(max(df['LONGITUDE']))", "+  lat_quadrants = [min_lat + i*(lat_range / 4) for i in range(4)]", "+  lat_quadrants.append(max(df['LATITUDE']))", "+", "+  '''", "+  Below I analyze the number of crashes occuring on dangerous or defective roads per region", "+  in an attempt to control for these variables in my analysis of crash frequencies per neighborhood.", "+  I consider a dangerous road to be a ffour waaya, divided (any type), T-Intersection, Center turn lane,", "+   five point, YIntersection, or ramp trafficway", "+  '''", "+  for j in range(16):", "+    lat_min = lat_quadrants[(j % 4)]", "+    lat_max = lat_quadrants[(j % 4) + 1]", "+    long_min = long_quadrants[int(j/4)]", "+    long_max = long_quadrants[int(j/4) + 1]", "+", "+    quadrant_df = df[ (df['LONGITUDE'] >  long_min) & (df['LONGITUDE'] < long_max) & (df['LATITUDE'] > lat_min) & (df['LATITUDE'] < lat_max)]", "+    num_crashes = quadrant_df['LATITUDE'].count() #the total number of crashes in this region", "+    defect_count = quadrant_df[(quadrant_df['ROAD_DEFECT'] == \"RUT, HOLES\") | (quadrant_df['ROAD_DEFECT'] == \"WORN SURFACE\")  | (quadrant_df['ROAD_DEFECT'] == \"SHOULDER DEFECT\") | (quadrant_df['ROAD_DEFECT'] == \"DEBRIS ON ROADWAY\")]['ROAD_DEFECT'].count()", "+    print(\"Number of crashes on defective roads in this region: \", defect_count)", "+    danger_count = quadrant_df[(quadrant_df['TRAFFICWAY_TYPE'] == 'DIVIDED - W/MEDIAN (NOT RAISED)') | (quadrant_df['TRAFFICWAY_TYPE'] ==  'DIVIDED - W/MEDIAN BARRIER') |", "+                                (quadrant_df['TRAFFICWAY_TYPE'] == 'FOUR_WAY') | (quadrant_df['TRAFFICWAY_TYPE'] == 'T-INTERSECTION')", "+                                | (quadrant_df['TRAFFICWAY_TYPE'] ==  'CENTER TURN LANE') |  (quadrant_df['TRAFFICWAY_TYPE'] ==  'RAMP') |", "+                                (quadrant_df['TRAFFICWAY_TYPE'] ==  'FIVE POINT, OR MORE') | (quadrant_df['TRAFFICWAY_TYPE'] ==  'Y-INTERSECTION')]['TRAFFICWAY_TYPE'].count()", "+    print(\"Number of crashes dangerous trafficway types in this region: \", danger_count)", "+", "+", "+", "+  #visualize frequencies while controlling for defect/road types", "+  cropped_df = df[(df['LONGITUDE'] > -87.83305453675) & (df['LATITUDE'] > 41.73919756425)]   #crop to regions of interest in Chicago", "+  non_defective = cropped_df[cropped_df['ROAD_DEFECT'] == 'NO DEFECTS']", "+  plot_octants(non_defective, True)", "+", "+", "+    #analyze how", "+    spurious_corrs(cdf)", "+"], "sub": ["-#TODO 2.", "-def plot(df):", "-  '''plot(df) takes as input a clean dataframe and generates a plot. The", "-  style of the plot and variables are up to you.", "-  #plt.scatter(df['A'],df['B'])", "-    plot(cdf)", "-    plt.show()"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1638057179.1760519 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sat Nov 27 18:53:03 2021 -0500", "msg": "1638057179.1760519_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1638057179.1760519 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+def replace_with_random(mean, std, val):", "+  if np.isnan(val):", "+    val = np.random()", "+  return val", "+", "+", "+  lat_mean = df[\"LATITUDE\"].mean()", "+  lat_std = df['LATITUDE'].std()", "+  # lat_med = df[\"LATITUDE\"].median()", "+  # long_med = df[\"LONGITUDE\"].median()", "+  # df = df.replace({'LATITUDE': 0}, lat_med)", "+  # df = df.replace({'LONGITUDE': 0}, long_med)", "+  # df['LATITUDE'] = df['LATITUDE'].fillna(lat_med)", "+  # df['LONGITUDE'] = df['LONGITUDE'].fillna(long_med)", "+", "+  #replace missing/spurious values for long/lata with random vals", "+  df['LATITUDE'] = df['LATITUDE'].apply(replace_with_random)", "+", "+"], "sub": ["-  lat_med = df[\"LATITUDE\"].median()", "-  long_med = df[\"LONGITUDE\"].median()", "-  df = df.replace({'LATITUDE': 0}, lat_med)", "-  df = df.replace({'LONGITUDE': 0}, long_med)", "-  df['LATITUDE'] = df['LATITUDE'].fillna(lat_med)", "-  df['LONGITUDE'] = df['LONGITUDE'].fillna(long_med)"]}, {"files": "diff --git a/explore/plot_3.png b/explore/plot_3.png", "add": [], "sub": []}, {"files": "diff --git a/explore/plot_3.py b/explore/plot_3.py", "add": ["+import numpy as np", "+\t#print(df['MOST_SEVERE_INJURY'] == 'NO INDICATION OF INJURY')", "+\tdf['INJURY_CODE'] = (df['MOST_SEVERE_INJURY'] == 'NO INDICATION OF INJURY')* 1", "+\tdf['INJURY_CODE'] = df['INJURY_CODE'] + (df['MOST_SEVERE_INJURY'] == 'REPORTED, NOT EVIDENT') * 2", "+\tdf['INJURY_CODE'] = df['INJURY_CODE'] + (df['MOST_SEVERE_INJURY'] == 'NONINCAPACITATING INJURY') * 3", "+\tdf['INJURY_CODE'] = df['INJURY_CODE'] + (df['MOST_SEVERE_INJURY'] == 'INCAPACITATING INJURY') * 4", "+\tdf['INJURY_CODE'] = df['INJURY_CODE'] + (df['MOST_SEVERE_INJURY'] == 'FATAL') * 5", "+\tavg_injury_severities = []", "+\tconds = df['WEATHER_CONDITION'].unique()", "+\tfor cond in conds:", "+\t\tavg_injury_severities.append(df[df[\"WEATHER_CONDITION\"] == cond]['INJURY_CODE'].mean())", "+\t# sev_df = pd.DataFrame({\"Avg_Injury_Severity\": avg_injury_severities}, index=conds)", "+\t# sev_df.plot.bar()", "+\t# plt.show()", "+\t# plt.scatter(df['WEATHER_CONDITION'], df['INJURY_CODE'], alpha=0.1)", "+\t# plt.xlabel('Weather condition')", "+\t# plt.ylabel('Most severe injury severity')", "+\t# plt.show()", "+", "+\tindex = df['WEATHER_CONDITION'].unique()", "+\tnew_df = pd.DataFrame({}, index=index)", "+\tinjury_severities = df['MOST_SEVERE_INJURY'].unique()", "+\tfor el in injury_severities:", "+\t\tnew_df[el + \"_COUNT\"] = df[df[\"MOST_SEVERE_INJURY\"] == el]['WEATHER_CONDITION'].value_counts()", "+\t\tnew_df[el + \"_COUNT\"] = new_df[el + \"_COUNT\"].fillna(0)", "+\t\t#new_df[el + \"_COUNT\"] = new_df[el + \"_COUNT\"] / (df[\"MOST_SEVERE_INJURY\"] == el).sum()", "+\tnew_df = new_df.div(new_df.sum(axis=1), axis=0)", "+\tprint(new_df)", "+", "+\tplt.rcParams[\"figure.figsize\"] = (10,10)", "+\tnew_df.plot.bar(stacked=True)", "+\tplt.savefig('plot_3.png')", "+\tplt.show()", "+", "+", "+", "+\tnew_df2 = pd.DataFrame({}, index=index)", "+\tdamages = df['DAMAGE'].unique()", "+\tfor el in damages:", "+\t\tnew_df2[el + \"_COUNT\"] = df[df[\"DAMAGE\"] == el]['WEATHER_CONDITION'].value_counts()", "+\t\tnew_df2[el + \"_COUNT\"] = new_df2[el + \"_COUNT\"].fillna(0)", "+\t\t#new_df[el + \"_COUNT\"] = new_df[el + \"_COUNT\"] / (df[\"MOST_SEVERE_INJURY\"] == el).sum()", "+\tnew_df2 = new_df2.div(new_df2.sum(axis=1), axis=0)", "+\tprint(new_df2)", "+", "+\tplt.rcParams[\"figure.figsize\"] = (10,10)", "+\tnew_df2.plot.bar(stacked=True)", "+", "+\t# all_counts = []", "+\t# for cond in index:", "+\t# \tcounts = df[df[\"WEATHER_CONDITION\"] == cond]['MOST_SEVERE_INJURY'].value_counts()", "+\t# \tprint(counts)", "+\t# \tall_counts.append(counts)", "+\t# all_counts = np.array(all_counts)", "+\t# new_df = pd.DataFrame(all_counts, columns=injury_severities, index=index)", "+\t# print(new_df)", "+"], "sub": ["-\tprint(df['MOST_SEVERE_INJURY'].unique())", "-\tprint(df['MOST_SEVERE_INJURY'] == 'NO INDICATION OF INJURY')", "-\tdf['INJURY_CODE'] = df[df['MOST_SEVERE_INJURY'] == 'NO INDICATION OF INJURY'] * 1", "-\tdf['INJURY_CODE'] = df['INJURY_CODE'] + df[df['MOST_SEVERE_INJURY'] == 'REPORTED, NOT EVIDENT'] * 2", "-\tdf['INJURY_CODE'] = df['INJURY_CODE'] + df[df['MOST_SEVERE_INJURY'] == 'NONINCAPACITATING INJURY'] * 3", "-\tdf['INJURY_CODE'] = df['INJURY_CODE'] + df[df['MOST_SEVERE_INJURY'] == 'INCAPACITATING INJURY'] * 4", "-\tdf['INJURY_CODE'] = df['INJURY_CODE'] + df[df['MOST_SEVERE_INJURY'] == 'FATAL'] * 5", "-\tplt.scatter(df['WEATHER_CONDITION'], df['INJURY_CODE'], alpha=0.1)", "-\tplt.xlabel('Weather condition')", "-\tplt.ylabel('Most severe injury severity')", "-    plt.savefig('plot_3.png')"]}, {"files": "diff --git a/explore/plot_4.png b/explore/plot_4.png", "add": [], "sub": []}, {"files": "diff --git a/explore/plot_4.py b/explore/plot_4.py", "add": ["+import numpy as np", "+  fig, axes = plt.subplots(2, 2, figsize=(10, 10))", "+  print(axes)", "+", "+", "+  lat_range = max(df['LATITUDE']) - min(df['LATITUDE'])", "+  min_lat = min(df['LATITUDE'])", "+  min_long = min(df['LONGITUDE'])", "+  long_range = max(df['LONGITUDE']) - min_long", "+  long_quadrants = [min_long + i*(long_range / 4) for i in range(4)]", "+  long_quadrants.append(max(df['LONGITUDE']))", "+  lat_quadrants = [min_lat + i*(lat_range / 4) for i in range(4)]", "+  lat_quadrants.append(max(df['LATITUDE']))", "+  print(long_quadrants)", "+  print(lat_quadrants)", "+  for j in range(4):", "+  \taxes[int(j > 1), (j % 2)].scatter(df[(df['LONGITUDE'] >  long_quadrants[j]) & (df['LONGITUDE'] < long_quadrants[j+1])]['LATITUDE'], df[(df['LONGITUDE'] > long_quadrants[j]) & (df['LONGITUDE'] < long_quadrants[j+1])]['LONGITUDE'], alpha=0.1)", "+  \tprint(df[(df['LONGITUDE'] >  long_quadrants[j]) & (df['LONGITUDE'] < long_quadrants[j+1])]['LATITUDE'].count())", "+  # plt.xticks(np.arange(min(df['LATITUDE']), max(df['LATITUDE'])+.01, 0.01))", "+  # plt.yticks(np.arange(min(df['LONGITUDE']), max(df['LONGITUDE'])+.01, 0.01))", "+  plt.show()"], "sub": ["-  plt.scatter(df['A'],df['B'])"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Sat Nov 27 18:52:59 2021 -0500", "msg": "1638057179.1760519_start"}, {"diffs": [{"files": "diff --git a/explore/plot_4.py b/explore/plot_4.py", "add": ["+import numpy as np", "+  fig, axes = plt.subplots(2, 2, figsize=(10, 10))", "+  print(axes)", "+", "+", "+  lat_range = max(df['LATITUDE']) - min(df['LATITUDE'])", "+  min_lat = min(df['LATITUDE'])", "+  min_long = min(df['LONGITUDE'])", "+  long_range = max(df['LONGITUDE']) - min_long", "+  long_quadrants = [min_long + i*(long_range / 4) for i in range(4)]", "+  long_quadrants.append(max(df['LONGITUDE']))", "+  lat_quadrants = [min_lat + i*(lat_range / 4) for i in range(4)]", "+  lat_quadrants.append(max(df['LATITUDE']))", "+  print(long_quadrants)", "+  print(lat_quadrants)", "+  for j in range(4):", "+  \taxes[int(j > 1), (j % 2)].scatter(df[(df['LONGITUDE'] >  long_quadrants[j]) & (df['LONGITUDE'] < long_quadrants[j+1])]['LATITUDE'], df[(df['LONGITUDE'] > long_quadrants[j]) & (df['LONGITUDE'] < long_quadrants[j+1])]['LONGITUDE'], alpha=0.1)", "+  \tprint(df[(df['LONGITUDE'] >  long_quadrants[j]) & (df['LONGITUDE'] < long_quadrants[j+1])]['LATITUDE'].count())", "+  # plt.xticks(np.arange(min(df['LATITUDE']), max(df['LATITUDE'])+.01, 0.01))", "+  # plt.yticks(np.arange(min(df['LONGITUDE']), max(df['LONGITUDE'])+.01, 0.01))", "+  plt.show()"], "sub": ["-  plt.scatter(df['A'],df['B'])"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1637981412.324471 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 21:50:24 2021 -0500", "msg": "1637981412.324471_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1637981412.324471 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": [], "sub": ["-    print(df.shape)", "-    print(cdf.shapes)"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 21:50:12 2021 -0500", "msg": "1637981412.324471_start"}, {"diffs": [{"files": "diff --git a/explore/load.py b/explore/load.py", "add": [], "sub": ["-    print(df.shape)", "-    print(cdf.shapes)"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1637981390.2882528 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 21:49:55 2021 -0500", "msg": "1637981390.2882528_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1637981390.2882528 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+  df['MOST_SEVERE_INJURY'] = df['MOST_SEVERE_INJURY'].fillna('NO INDICATION OF INJURY')"], "sub": ["-  df['MOST_SEVERE_INJURY'] = df['LONGITUDE'].fillna('NO INDICATION OF INJURY')"]}, {"files": "diff --git a/explore/plot_3.py b/explore/plot_3.py", "add": ["+\tprint(df['MOST_SEVERE_INJURY'].unique())", "+\tprint(df['MOST_SEVERE_INJURY'] == 'NO INDICATION OF INJURY')", "+\tdf['INJURY_CODE'] = df[df['MOST_SEVERE_INJURY'] == 'NO INDICATION OF INJURY'] * 1", "+\tdf['INJURY_CODE'] = df['INJURY_CODE'] + df[df['MOST_SEVERE_INJURY'] == 'REPORTED, NOT EVIDENT'] * 2", "+\tdf['INJURY_CODE'] = df['INJURY_CODE'] + df[df['MOST_SEVERE_INJURY'] == 'NONINCAPACITATING INJURY'] * 3", "+\tdf['INJURY_CODE'] = df['INJURY_CODE'] + df[df['MOST_SEVERE_INJURY'] == 'INCAPACITATING INJURY'] * 4", "+\tdf['INJURY_CODE'] = df['INJURY_CODE'] + df[df['MOST_SEVERE_INJURY'] == 'FATAL'] * 5", "+\tplt.scatter(df['WEATHER_CONDITION'], df['INJURY_CODE'], alpha=0.1)", "+\tplt.xlabel('Weather condition')", "+\tplt.ylabel('Most severe injury severity')", "+\tplt.show()", "+\treturn None"], "sub": ["-  '''plot(df) takes as input a clean dataframe and generates a plot. The", "-  style of the plot and variables are up to you.", "-  '''", "-  plt.scatter(df['A'],df['B'])", "-  return None"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df['MOST_SEVERE_INJURY'] = df['MOST_SEVERE_INJURY'].fillna('NO INDICATION OF INJURY')"], "sub": ["-  df['MOST_SEVERE_INJURY'] = df['LONGITUDE'].fillna('NO INDICATION OF INJURY')"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 21:49:50 2021 -0500", "msg": "1637981390.2882528_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df['MOST_SEVERE_INJURY'] = df['MOST_SEVERE_INJURY'].fillna('NO INDICATION OF INJURY')"], "sub": ["-  df['MOST_SEVERE_INJURY'] = df['LONGITUDE'].fillna('NO INDICATION OF INJURY')"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637980363.196949 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 21:32:52 2021 -0500", "msg": "1637980363.196949_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637980363.196949 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+    print(df.shape)", "+    print(cdf.shapes)", "+"], "sub": []}, {"files": "diff --git a/explore/plot_2.png b/explore/plot_2.png", "add": [], "sub": []}, {"files": "diff --git a/explore/plot_2.py b/explore/plot_2.py", "add": ["+import matplotlib", "+import textwrap", "+    '''plot(df) takes as input a clean dataframe and generates a plot. The", "+    style of the plot and variables are up to you.", "+    '''", "+    #df = df.groupby(\"WEATHER_CONDITION\").filter(lambda x: len(x) > 1000)", "+    fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20, 14))", "+    ax1_bars = [i for i in range(len(df['WEATHER_CONDITION'].unique()))]", "+", "+    ax1.hist(df['WEATHER_CONDITION'], log=True, bins=[x for i in ax1_bars for x in (i-0.4,i+0.4)])", "+    ax1.set_xlabel('Weather condition')", "+    ax1.tick_params(axis='x', labelrotation= 90, labelsize=6)", "+    ax1.set_ylabel('Log 10 # of crashes')", "+    ax1.set_title('Weather effect on crash frequency')", "+", "+    ax2_bars = [i for i in range(len(df['LIGHTING_CONDITION'].unique()))]", "+    ax2.hist(df['LIGHTING_CONDITION'], log=True, bins=[x for i in ax2_bars for x in (i-0.4,i+0.4)])", "+    ax2.set_xlabel('Lighting condition')", "+    ax2.tick_params(axis='x', labelrotation= 90, labelsize=6)", "+    ax2.set_ylabel('Log 10 # of crashes')", "+    ax2.set_title('Lighting effect on crash frequency')", "+", "+    ax3_bars = [i for i in range(len(df['ROADWAY_SURFACE_COND'].unique()))]", "+    ax3.hist(df['ROADWAY_SURFACE_COND'], log=True,  bins=[x for i in ax3_bars for x in (i-0.4,i+0.4)])", "+    ax3.set_xlabel('Roadway surface condition')", "+    ax3.tick_params(axis='x', labelrotation= 90, labelsize=6)", "+    ax3.set_ylabel('Log 10 # of crashes')", "+    ax3.set_title('Roadway surface on crash frequency')", "+", "+    fig.savefig('plot_2.png')", "+    plt.show()", "+", "+    return None", "+", "+"], "sub": ["-  '''plot(df) takes as input a clean dataframe and generates a plot. The", "-  style of the plot and variables are up to you.", "-  '''", "-  plt.scatter(df['A'],df['B'])", "-  return None", "-    plt.savefig('plot_2.png')"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  print(\"Most severe\")", "+  print(df['MOST_SEVERE_INJURY'].value_counts())"], "sub": ["-  print(\"Road defect counts\")", "-  print(df['ROAD_DEFECT'].value_counts())"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 21:32:43 2021 -0500", "msg": "1637980363.196949_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  print(\"Most severe\")", "+  print(df['MOST_SEVERE_INJURY'].value_counts())"], "sub": ["-  print(\"Road defect counts\")", "-  print(df['ROAD_DEFECT'].value_counts())"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1637974628.966609 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:57:22 2021 -0500", "msg": "1637974628.966609_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1637974628.966609 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+  #delete missing vals/semantic errors when there are few affected rows", "+  df = df.drop(df[df['STREET_NO'] == 0].index)", "+  df = df.drop(df[df['STREET_DIRECTION'].isna()].index)", "+  df = df.drop(df[df['STREET_NAME'] == 'UNKNOWN'].index)", "+  df = df.drop(df[df['STREET_NAME'].isna()].index)", "+  df = df.drop(df[df['BEAT_OF_OCCURRENCE'].isna()].index)", "+  df = df.drop(df[df['NUM_UNITS'].isna()].index)", "+  df = df.drop(df[df['CRASH_HOUR'].isna()].index)", "+", "+  #replace some with median (for numerical)", "+  df = df.replace({'POSTED_SPEED_LIMIT': 0}, df[\"POSTED_SPEED_LIMIT\"].median())", "+  lat_med = df[\"LATITUDE\"].median()", "+  long_med = df[\"LONGITUDE\"].median()", "+  df = df.replace({'LATITUDE': 0}, lat_med)", "+  df = df.replace({'LONGITUDE': 0}, long_med)", "+  df['LATITUDE'] = df['LATITUDE'].fillna(lat_med)", "+  df['LONGITUDE'] = df['LONGITUDE'].fillna(long_med)", "+  df['MOST_SEVERE_INJURY'] = df['LONGITUDE'].fillna('NO INDICATION OF INJURY')", "+  df['INJURIES_FATAL']= df['INJURIES_FATAL'].fillna(0)", "+  df['INJURIES_INCAPACITATING']= df['INJURIES_INCAPACITATING'].fillna(0)", "+  df['INJURIES_NO_INDICATION'] = df['INJURIES_NO_INDICATION'].fillna(df['INJURIES_NO_INDICATION'].median())", "+  df['INJURIES_REPORTED_NOT_EVIDENT'] = df['INJURIES_REPORTED_NOT_EVIDENT'].fillna(df['INJURIES_REPORTED_NOT_EVIDENT'].median())", "+  df['INJURIES_NON_INCAsPACITATING'] = df['INJURIES_NON_INCAPACITATING'].fillna(df['INJURIES_NON_INCAPACITATING'].median())", "+  df['INJURIES_TOTAL'] = df['INJURIES_TOTAL'].fillna(df['INJURIES_TOTAL'].median())", "+", "+  #replace remaining with most common (for categorical)", "+  df = df.replace({'ROADWAY_SURFACE_COND': 'UNKNOWN'}, df['ROADWAY_SURFACE_COND'].value_counts().idxmax())", "+  df = df.replace({'ROAD_DEFECT': 'UNKNOWN'}, df['ROAD_DEFECT'].value_counts().idxmax())", "+  df = df.replace({'WEATHER_CONDITION': 'UNKNOWN'}, df['WEATHER_CONDITION'].value_counts().idxmax())", "+  df = df.replace({'TRAFFICWAY_TYPE': 'UNKNOWN'}, df['TRAFFICWAY_TYPE'].value_counts().idxmax())", "+  df = df.replace({'LIGHTING_CONDITION': 'UNKNOWN'}, df['LIGHTING_CONDITION'].value_counts().idxmax())", "+"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:57:08 2021 -0500", "msg": "1637974628.966609_start"}, {"diffs": [{"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+  #delete missing vals/semantic errors when there are few affected rows", "+  df = df.drop(df[df['STREET_NO'] == 0].index)", "+  df = df.drop(df[df['STREET_DIRECTION'].isna()].index)", "+  df = df.drop(df[df['STREET_NAME'] == 'UNKNOWN'].index)", "+  df = df.drop(df[df['STREET_NAME'].isna()].index)", "+  df = df.drop(df[df['BEAT_OF_OCCURRENCE'].isna()].index)", "+  df = df.drop(df[df['NUM_UNITS'].isna()].index)", "+  df = df.drop(df[df['CRASH_HOUR'].isna()].index)", "+", "+  #replace some with median (for numerical)", "+  df = df.replace({'POSTED_SPEED_LIMIT': 0}, df[\"POSTED_SPEED_LIMIT\"].median())", "+  lat_med = df[\"LATITUDE\"].median()", "+  long_med = df[\"LONGITUDE\"].median()", "+  df = df.replace({'LATITUDE': 0}, lat_med)", "+  df = df.replace({'LONGITUDE': 0}, long_med)", "+  df['LATITUDE'] = df['LATITUDE'].fillna(lat_med)", "+  df['LONGITUDE'] = df['LONGITUDE'].fillna(long_med)", "+  df['MOST_SEVERE_INJURY'] = df['LONGITUDE'].fillna('NO INDICATION OF INJURY')", "+  df['INJURIES_FATAL']= df['INJURIES_FATAL'].fillna(0)", "+  df['INJURIES_INCAPACITATING']= df['INJURIES_INCAPACITATING'].fillna(0)", "+  df['INJURIES_NO_INDICATION'] = df['INJURIES_NO_INDICATION'].fillna(df['INJURIES_NO_INDICATION'].median())", "+  df['INJURIES_REPORTED_NOT_EVIDENT'] = df['INJURIES_REPORTED_NOT_EVIDENT'].fillna(df['INJURIES_REPORTED_NOT_EVIDENT'].median())", "+  df['INJURIES_NON_INCAsPACITATING'] = df['INJURIES_NON_INCAPACITATING'].fillna(df['INJURIES_NON_INCAPACITATING'].median())", "+  df['INJURIES_TOTAL'] = df['INJURIES_TOTAL'].fillna(df['INJURIES_TOTAL'].median())", "+", "+  #replace remaining with most common (for categorical)", "+  df = df.replace({'ROADWAY_SURFACE_COND': 'UNKNOWN'}, df['ROADWAY_SURFACE_COND'].value_counts().idxmax())", "+  df = df.replace({'ROAD_DEFECT': 'UNKNOWN'}, df['ROAD_DEFECT'].value_counts().idxmax())", "+  df = df.replace({'WEATHER_CONDITION': 'UNKNOWN'}, df['WEATHER_CONDITION'].value_counts().idxmax())", "+  df = df.replace({'TRAFFICWAY_TYPE': 'UNKNOWN'}, df['TRAFFICWAY_TYPE'].value_counts().idxmax())", "+  df = df.replace({'LIGHTING_CONDITION': 'UNKNOWN'}, df['LIGHTING_CONDITION'].value_counts().idxmax())", "+"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , False, 1637974502.662787 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:55:11 2021 -0500", "msg": "1637974502.662787_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , False, 1637974502.662787 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , False, 1637974467.900832 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:54:37 2021 -0500", "msg": "1637974467.900832_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , False, 1637974467.900832 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637974250.654827 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:50:59 2021 -0500", "msg": "1637974250.654827_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637974250.654827 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df = df.replace({'ROADWAY_SURFACE_COND': 'UNKNOWN'}, df['ROADWAY_SURFACE_COND'].value_counts().idxmax())", "+  df = df.replace({'ROAD_DEFECT': 'UNKNOWN'}, df['ROAD_DEFECT'].value_counts().idxmax())", "+  df = df.replace({'WEATHER_CONDITION': 'UNKNOWN'}, df['WEATHER_CONDITION'].value_counts().idxmax())", "+  df = df.replace({'TRAFFICWAY_TYPE': 'UNKNOWN'}, df['TRAFFICWAY_TYPE'].value_counts().idxmax())", "+  df = df.replace({'LIGHTING_CONDITION': 'UNKNOWN'}, df['LIGHTING_CONDITION'].value_counts().idxmax())"], "sub": ["-  df = df.replace({'ROADWAY_SURFACE_COND': 'UNKNOWN'}, df['ROADWAY_SURFACE_COND'].mode())", "-  df = df.replace({'ROAD_DEFECT': 'UNKNOWN'}, df['ROAD_DEFECT'].mode())", "-  df = df.replace({'WEATHER_CONDITION': 'UNKNOWN'}, df['WEATHER_CONDITION'].mode())", "-  df = df.replace({'TRAFFICWAY_TYPE': 'UNKNOWN'}, df['TRAFFICWAY_TYPE'].mode())", "-  df = df.replace({'LIGHTING_CONDITION': 'UNKNOWN'}, df['LIGHTING_CONDITION'].mode())"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:50:50 2021 -0500", "msg": "1637974250.654827_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df = df.replace({'ROADWAY_SURFACE_COND': 'UNKNOWN'}, df['ROADWAY_SURFACE_COND'].value_counts().idxmax())", "+  df = df.replace({'ROAD_DEFECT': 'UNKNOWN'}, df['ROAD_DEFECT'].value_counts().idxmax())", "+  df = df.replace({'WEATHER_CONDITION': 'UNKNOWN'}, df['WEATHER_CONDITION'].value_counts().idxmax())", "+  df = df.replace({'TRAFFICWAY_TYPE': 'UNKNOWN'}, df['TRAFFICWAY_TYPE'].value_counts().idxmax())", "+  df = df.replace({'LIGHTING_CONDITION': 'UNKNOWN'}, df['LIGHTING_CONDITION'].value_counts().idxmax())"], "sub": ["-  df = df.replace({'ROADWAY_SURFACE_COND': 'UNKNOWN'}, df['ROADWAY_SURFACE_COND'].mode())", "-  df = df.replace({'ROAD_DEFECT': 'UNKNOWN'}, df['ROAD_DEFECT'].mode())", "-  df = df.replace({'WEATHER_CONDITION': 'UNKNOWN'}, df['WEATHER_CONDITION'].mode())", "-  df = df.replace({'TRAFFICWAY_TYPE': 'UNKNOWN'}, df['TRAFFICWAY_TYPE'].mode())", "-  df = df.replace({'LIGHTING_CONDITION': 'UNKNOWN'}, df['LIGHTING_CONDITION'].mode())"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637974017.605279 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:47:06 2021 -0500", "msg": "1637974017.605279_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637974017.605279 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df = df.replace({'ROAD_DEFECT': 'UNKNOWN'}, df['ROAD_DEFECT'].mode())"], "sub": ["-  df = df.replace({'ROADWAY_DEFECT': 'UNKNOWN'}, df['ROADWAY_DEFECT'].mode())"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:46:57 2021 -0500", "msg": "1637974017.605279_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df = df.replace({'ROAD_DEFECT': 'UNKNOWN'}, df['ROAD_DEFECT'].mode())"], "sub": ["-  df = df.replace({'ROADWAY_DEFECT': 'UNKNOWN'}, df['ROADWAY_DEFECT'].mode())"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637973974.641001 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:46:23 2021 -0500", "msg": "1637973974.641001_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637973974.641001 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+", "+  df = df.replace({'ROADWAY_DEFECT': 'UNKNOWN'}, df['ROADWAY_DEFECT'].mode())"], "sub": ["-  print(\"Most severe injury\")", "-  print(df['MOST_SEVERE_INJURY'].value_counts())", "-  df = df.replace({'ROADWAY_DEFECTS': 'UNKNOWN'}, df['ROADWAY_DEFECTS'].mode())"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:46:14 2021 -0500", "msg": "1637973974.641001_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+", "+  df = df.replace({'ROADWAY_DEFECT': 'UNKNOWN'}, df['ROADWAY_DEFECT'].mode())"], "sub": ["-  print(\"Most severe injury\")", "-  print(df['MOST_SEVERE_INJURY'].value_counts())", "-  df = df.replace({'ROADWAY_DEFECTS': 'UNKNOWN'}, df['ROADWAY_DEFECTS'].mode())"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637973948.344318 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:45:57 2021 -0500", "msg": "1637973948.344318_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637973948.344318 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df['MOST_SEVERE_INJURY'] = df['LONGITUDE'].fillna('NO INDICATION OF INJURY')", "+  df['INJURIES_FATAL']= df['INJURIES_FATAL'].fillna(0)", "+  df['INJURIES_INCAPACITATING']= df['INJURIES_INCAPACITATING'].fillna(0)", "+  df['INJURIES_NO_INDICATION'] = df['INJURIES_NO_INDICATION'].fillna(df['INJURIES_NO_INDICATION'].median())", "+  df['INJURIES_REPORTED_NOT_EVIDENT'] = df['INJURIES_REPORTED_NOT_EVIDENT'].fillna(df['INJURIES_REPORTED_NOT_EVIDENT'].median())", "+  df['INJURIES_NON_INCAsPACITATING'] = df['INJURIES_NON_INCAPACITATING'].fillna(df['INJURIES_NON_INCAPACITATING'].median())", "+  df['INJURIES_TOTAL'] = df['INJURIES_TOTAL'].fillna(df['INJURIES_TOTAL'].median())", "+", "+  df = df.replace({'ROADWAY_SURFACE_COND': 'UNKNOWN'}, df['ROADWAY_SURFACE_COND'].mode())", "+  df = df.replace({'ROADWAY_DEFECTS': 'UNKNOWN'}, df['ROADWAY_DEFECTS'].mode())", "+  df = df.replace({'WEATHER_CONDITION': 'UNKNOWN'}, df['WEATHER_CONDITION'].mode())", "+  df = df.replace({'TRAFFICWAY_TYPE': 'UNKNOWN'}, df['TRAFFICWAY_TYPE'].mode())", "+  df = df.replace({'LIGHTING_CONDITION': 'UNKNOWN'}, df['LIGHTING_CONDITION'].mode())", "+", "+", "+  #make sure replacements worked", "+  print('Unknown entires roadway surf - ', (df['ROADWAY_SURFACE_COND'] == 'UNKNOWN').sum())"], "sub": ["-  df = df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index)"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:45:48 2021 -0500", "msg": "1637973948.344318_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df['MOST_SEVERE_INJURY'] = df['LONGITUDE'].fillna('NO INDICATION OF INJURY')", "+  df['INJURIES_FATAL']= df['INJURIES_FATAL'].fillna(0)", "+  df['INJURIES_INCAPACITATING']= df['INJURIES_INCAPACITATING'].fillna(0)", "+  df['INJURIES_NO_INDICATION'] = df['INJURIES_NO_INDICATION'].fillna(df['INJURIES_NO_INDICATION'].median())", "+  df['INJURIES_REPORTED_NOT_EVIDENT'] = df['INJURIES_REPORTED_NOT_EVIDENT'].fillna(df['INJURIES_REPORTED_NOT_EVIDENT'].median())", "+  df['INJURIES_NON_INCAsPACITATING'] = df['INJURIES_NON_INCAPACITATING'].fillna(df['INJURIES_NON_INCAPACITATING'].median())", "+  df['INJURIES_TOTAL'] = df['INJURIES_TOTAL'].fillna(df['INJURIES_TOTAL'].median())", "+", "+  df = df.replace({'ROADWAY_SURFACE_COND': 'UNKNOWN'}, df['ROADWAY_SURFACE_COND'].mode())", "+  df = df.replace({'ROADWAY_DEFECTS': 'UNKNOWN'}, df['ROADWAY_DEFECTS'].mode())", "+  df = df.replace({'WEATHER_CONDITION': 'UNKNOWN'}, df['WEATHER_CONDITION'].mode())", "+  df = df.replace({'TRAFFICWAY_TYPE': 'UNKNOWN'}, df['TRAFFICWAY_TYPE'].mode())", "+  df = df.replace({'LIGHTING_CONDITION': 'UNKNOWN'}, df['LIGHTING_CONDITION'].mode())", "+", "+", "+  #make sure replacements worked", "+  print('Unknown entires roadway surf - ', (df['ROADWAY_SURFACE_COND'] == 'UNKNOWN').sum())"], "sub": ["-  df = df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index)"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637972648.937974 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:24:17 2021 -0500", "msg": "1637972648.937974_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637972648.937974 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df = df.replace({'POSTED_SPEED_LIMIT': 0}, df[\"POSTED_SPEED_LIMIT\"].median())", "+  lat_med = df[\"LATITUDE\"].median()", "+  long_med = df[\"LONGITUDE\"].median()", "+  df = df.replace({'LATITUDE': 0}, lat_med)", "+  df = df.replace({'LONGITUDE': 0}, long_med)", "+  df['LATITUDE'] = df['LATITUDE'].fillna(lat_med)", "+  df['LONGITUDE'] = df['LONGITUDE'].fillna(long_med)", "+", "+  print('Zero entries speed lim - ', (df['POSTED_SPEED_LIMIT'] == 0).sum())", "+  print('na entries lat -',df['LATITUDE'].isna().sum())", "+  print('na entries long -',df['LONGITUDE'].isna().sum())", "+  print('Zero entries lat - ', (df['LATITUDE'] == 0).sum())", "+  print('Zero entries long - ', (df['LONGITUDE'] == 0).sum())"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:24:08 2021 -0500", "msg": "1637972648.937974_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df = df.replace({'POSTED_SPEED_LIMIT': 0}, df[\"POSTED_SPEED_LIMIT\"].median())", "+  lat_med = df[\"LATITUDE\"].median()", "+  long_med = df[\"LONGITUDE\"].median()", "+  df = df.replace({'LATITUDE': 0}, lat_med)", "+  df = df.replace({'LONGITUDE': 0}, long_med)", "+  df['LATITUDE'] = df['LATITUDE'].fillna(lat_med)", "+  df['LONGITUDE'] = df['LONGITUDE'].fillna(long_med)", "+", "+  print('Zero entries speed lim - ', (df['POSTED_SPEED_LIMIT'] == 0).sum())", "+  print('na entries lat -',df['LATITUDE'].isna().sum())", "+  print('na entries long -',df['LONGITUDE'].isna().sum())", "+  print('Zero entries lat - ', (df['LATITUDE'] == 0).sum())", "+  print('Zero entries long - ', (df['LONGITUDE'] == 0).sum())"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637972076.062966 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:14:44 2021 -0500", "msg": "1637972076.062966_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637972076.062966 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df = df.drop(df[df['STREET_NO'] == 0].index)", "+  df = df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index)", "+  df = df.drop(df[df['STREET_DIRECTION'].isna()].index)", "+  df = df.drop(df[df['STREET_NAME'] == 'UNKNOWN'].index)", "+  df = df.drop(df[df['STREET_NAME'].isna()].index)", "+  df = df.drop(df[df['BEAT_OF_OCCURRENCE'].isna()].index)", "+  df = df.drop(df[df['NUM_UNITS'].isna()].index)", "+  df = df.drop(df[df['CRASH_HOUR'].isna()].index)"], "sub": ["-  df.drop(df[df['STREET_NO'] == 0].index)", "-  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index)", "-  df.drop(df[df['STREET_DIRECTION'].isna()].index)", "-  df.drop(df[df['STREET_NAME'] == 'UNKNOWN'].index)", "-  df.drop(df[df['STREET_NAME'].isna()].index)", "-  df.drop(df[df['BEAT_OF_OCCURRENCE'].isna()].index)", "-  df.drop(df[df['NUM_UNITS'].isna()].index)", "-  df.drop(df[df['CRASH_HOUR'].isna()].index)"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:14:36 2021 -0500", "msg": "1637972076.062966_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df = df.drop(df[df['STREET_NO'] == 0].index)", "+  df = df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index)", "+  df = df.drop(df[df['STREET_DIRECTION'].isna()].index)", "+  df = df.drop(df[df['STREET_NAME'] == 'UNKNOWN'].index)", "+  df = df.drop(df[df['STREET_NAME'].isna()].index)", "+  df = df.drop(df[df['BEAT_OF_OCCURRENCE'].isna()].index)", "+  df = df.drop(df[df['NUM_UNITS'].isna()].index)", "+  df = df.drop(df[df['CRASH_HOUR'].isna()].index)"], "sub": ["-  df.drop(df[df['STREET_NO'] == 0].index)", "-  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index)", "-  df.drop(df[df['STREET_DIRECTION'].isna()].index)", "-  df.drop(df[df['STREET_NAME'] == 'UNKNOWN'].index)", "-  df.drop(df[df['STREET_NAME'].isna()].index)", "-  df.drop(df[df['BEAT_OF_OCCURRENCE'].isna()].index)", "-  df.drop(df[df['NUM_UNITS'].isna()].index)", "-  df.drop(df[df['CRASH_HOUR'].isna()].index)"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637972008.971641 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:13:37 2021 -0500", "msg": "1637972008.971641_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637972008.971641 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(df.shape)"], "sub": ["-    print(df.shape)"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:13:28 2021 -0500", "msg": "1637972008.971641_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(df.shape)"], "sub": ["-    print(df.shape)"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971996.4826398 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:13:17 2021 -0500", "msg": "1637971996.4826398_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971996.4826398 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(df.shape)", "+"], "sub": ["-    print(df.shape)"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:13:16 2021 -0500", "msg": "1637971996.4826398_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(df.shape)", "+"], "sub": ["-    print(df.shape)"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971967.747421 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:12:55 2021 -0500", "msg": "1637971967.747421_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971967.747421 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(df.shape)"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:12:47 2021 -0500", "msg": "1637971967.747421_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(df.shape)"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971941.0832121 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:12:29 2021 -0500", "msg": "1637971941.0832121_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971941.0832121 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['BEAT_OF_OCCURRENCE'].isna()].index)"], "sub": ["-  df.drop(df[df['BEAT_OF_OCCURENCE'].isna()].index)"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:12:21 2021 -0500", "msg": "1637971941.0832121_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['BEAT_OF_OCCURRENCE'].isna()].index)"], "sub": ["-  df.drop(df[df['BEAT_OF_OCCURENCE'].isna()].index)"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971904.5468569 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:11:52 2021 -0500", "msg": "1637971904.5468569_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971904.5468569 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['STREET_NAME'] == 'UNKNOWN'].index)", "+  df.drop(df[df['STREET_NAME'].isna()].index)", "+  df.drop(df[df['BEAT_OF_OCCURENCE'].isna()].index)", "+  df.drop(df[df['NUM_UNITS'].isna()].index)", "+  df.drop(df[df['CRASH_HOUR'].isna()].index)"], "sub": ["-  df.drop(df[df['STREET_NAME'] == 'UNKNOWN'])", "-  df.drop(df[df['STREET_NAME'].isna()])", "-  df.drop(df[df['BEAT_OF_OCCURENCE'].isna()])", "-  df.drop(df[df['NUM_UNITS'].isna()])", "-  df.drop(df[df['CRASH_HOUR'].isna()])"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:11:44 2021 -0500", "msg": "1637971904.5468569_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['STREET_NAME'] == 'UNKNOWN'].index)", "+  df.drop(df[df['STREET_NAME'].isna()].index)", "+  df.drop(df[df['BEAT_OF_OCCURENCE'].isna()].index)", "+  df.drop(df[df['NUM_UNITS'].isna()].index)", "+  df.drop(df[df['CRASH_HOUR'].isna()].index)"], "sub": ["-  df.drop(df[df['STREET_NAME'] == 'UNKNOWN'])", "-  df.drop(df[df['STREET_NAME'].isna()])", "-  df.drop(df[df['BEAT_OF_OCCURENCE'].isna()])", "-  df.drop(df[df['NUM_UNITS'].isna()])", "-  df.drop(df[df['CRASH_HOUR'].isna()])"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971759.520545 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:09:27 2021 -0500", "msg": "1637971759.520545_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971759.520545 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['STREET_NO'] == 0].index)", "+  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index)", "+  df.drop(df[df['STREET_DIRECTION'].isna()].index)"], "sub": ["-  df.drop(df[df['STREET_NO'] == 0].index())", "-  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index())", "-  df.drop(df[df['STREET_DIRECTION'].isna()].index())"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:09:19 2021 -0500", "msg": "1637971759.520545_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['STREET_NO'] == 0].index)", "+  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index)", "+  df.drop(df[df['STREET_DIRECTION'].isna()].index)"], "sub": ["-  df.drop(df[df['STREET_NO'] == 0].index())", "-  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index())", "-  df.drop(df[df['STREET_DIRECTION'].isna()].index())"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971737.382647 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:09:04 2021 -0500", "msg": "1637971737.382647_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971737.382647 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['STREET_NO'] == 0].index())", "+  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index())", "+  df.drop(df[df['STREET_DIRECTION'].isna()].index())"], "sub": ["-  df.drop(df[df['STREET_NO'] == 0])", "-  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'])", "-  df.drop(df[df['STREET_DIRECTION'].isna()])"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:08:57 2021 -0500", "msg": "1637971737.382647_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['STREET_NO'] == 0].index())", "+  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'].index())", "+  df.drop(df[df['STREET_DIRECTION'].isna()].index())"], "sub": ["-  df.drop(df[df['STREET_NO'] == 0])", "-  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'])", "-  df.drop(df[df['STREET_DIRECTION'].isna()])"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971622.752594 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:07:10 2021 -0500", "msg": "1637971622.752594_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971622.752594 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['STREET_NAME'].isna()])"], "sub": ["-  df.drop(df[df['STREET_NAME']isna()])"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:07:02 2021 -0500", "msg": "1637971622.752594_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['STREET_NAME'].isna()])"], "sub": ["-  df.drop(df[df['STREET_NAME']isna()])"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971611.698795 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:06:51 2021 -0500", "msg": "1637971611.698795_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637971611.698795 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['STREET_NO'] == 0])", "+  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'])", "+  df.drop(df[df['STREET_DIRECTION'].isna()])", "+  df.drop(df[df['STREET_NAME'] == 'UNKNOWN'])", "+  df.drop(df[df['STREET_NAME']isna()])", "+  df.drop(df[df['BEAT_OF_OCCURENCE'].isna()])", "+  df.drop(df[df['NUM_UNITS'].isna()])", "+  df.drop(df[df['CRASH_HOUR'].isna()])", "+    print(cdf.shape)"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 19:06:51 2021 -0500", "msg": "1637971611.698795_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  df.drop(df[df['STREET_NO'] == 0])", "+  df.drop(df[df['TRAFFICWAY_TYPE'] == 'UNKNOWN'])", "+  df.drop(df[df['STREET_DIRECTION'].isna()])", "+  df.drop(df[df['STREET_NAME'] == 'UNKNOWN'])", "+  df.drop(df[df['STREET_NAME']isna()])", "+  df.drop(df[df['BEAT_OF_OCCURENCE'].isna()])", "+  df.drop(df[df['NUM_UNITS'].isna()])", "+  df.drop(df[df['CRASH_HOUR'].isna()])", "+    print(cdf.shape)"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637970284.043405 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 18:44:51 2021 -0500", "msg": "1637970284.043405_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637970284.043405 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  print(\"Most severe injury\")", "+  print(df['MOST_SEVERE_INJURY'].value_counts())", "+"], "sub": ["-  print(\"Alignment counts\")", "-  print(df['ALIGNMENT'].value_counts())"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 18:44:44 2021 -0500", "msg": "1637970284.043405_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  print(\"Most severe injury\")", "+  print(df['MOST_SEVERE_INJURY'].value_counts())", "+"], "sub": ["-  print(\"Alignment counts\")", "-  print(df['ALIGNMENT'].value_counts())"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637968494.357117 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 18:15:01 2021 -0500", "msg": "1637968494.357117_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637968494.357117 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  print(\"Weather condition counts\")", "+  print(\"Lighting condition counts\")", "+  print(df['LIGHTING_CONDITION'].value_counts())", "+  print(\"Trafficway type counts\")", "+  print(\"Alignment counts\")", "+  print(\"Roadway surface counts\")", "+  print(\"Road defect counts\")"], "sub": ["-  print(df['LIGHTNING_CONDITION'].value_counts())", "-  print(df['ROADWAY_SURFACE_COND'].value_counts())"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 18:14:54 2021 -0500", "msg": "1637968494.357117_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  print(\"Weather condition counts\")", "+  print(\"Lighting condition counts\")", "+  print(df['LIGHTING_CONDITION'].value_counts())", "+  print(\"Trafficway type counts\")", "+  print(\"Alignment counts\")", "+  print(\"Roadway surface counts\")", "+  print(\"Road defect counts\")"], "sub": ["-  print(df['LIGHTNING_CONDITION'].value_counts())", "-  print(df['ROADWAY_SURFACE_COND'].value_counts())"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637968341.109664 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 18:12:26 2021 -0500", "msg": "1637968341.109664_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637968341.109664 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  #trying to find a reasonable replacaement for these ones", "+  print(df['WEATHER_CONDITION'].value_counts())", "+  print(df['LIGHTNING_CONDITION'].value_counts())", "+  print(df['TRAFFICWAY_TYPE'].value_counts())", "+  print(df['ALIGNMENT'].value_counts())", "+  print(df['ROADWAY_SURFACE_COND'].value_counts())", "+  print(df['ROAD_DEFECT'].value_counts())", "+  print(df['ROADWAY_SURFACE_COND'].value_counts())"], "sub": ["-   #trying to find a reasonable replacaement for these ones", "-   print(df['WEATHER_CONDITION'].value_counts())", "-   print(df['LIGHTNING_CONDITION'].value_counts())", "-   print(df['TRAFFICWAY_TYPE'].value_counts())", "-   print(df['ALIGNMENT'].value_counts())", "-   print(df['ROADWAY_SURFACE_COND'].value_counts())", "-   print(df['ROAD_DEFECT'].value_counts())", "-   print(df['ROADWAY_SURFACE_COND'].value_counts())"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 18:12:21 2021 -0500", "msg": "1637968341.109664_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  #trying to find a reasonable replacaement for these ones", "+  print(df['WEATHER_CONDITION'].value_counts())", "+  print(df['LIGHTNING_CONDITION'].value_counts())", "+  print(df['TRAFFICWAY_TYPE'].value_counts())", "+  print(df['ALIGNMENT'].value_counts())", "+  print(df['ROADWAY_SURFACE_COND'].value_counts())", "+  print(df['ROAD_DEFECT'].value_counts())", "+  print(df['ROADWAY_SURFACE_COND'].value_counts())"], "sub": ["-   #trying to find a reasonable replacaement for these ones", "-   print(df['WEATHER_CONDITION'].value_counts())", "-   print(df['LIGHTNING_CONDITION'].value_counts())", "-   print(df['TRAFFICWAY_TYPE'].value_counts())", "-   print(df['ALIGNMENT'].value_counts())", "-   print(df['ROADWAY_SURFACE_COND'].value_counts())", "-   print(df['ROAD_DEFECT'].value_counts())", "-   print(df['ROADWAY_SURFACE_COND'].value_counts())"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637968323.007025 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 18:12:03 2021 -0500", "msg": "1637968323.007025_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637968323.007025 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+", "+", "+   #trying to find a reasonable replacaement for these ones", "+   print(df['WEATHER_CONDITION'].value_counts())", "+   print(df['LIGHTNING_CONDITION'].value_counts())", "+   print(df['TRAFFICWAY_TYPE'].value_counts())", "+   print(df['ALIGNMENT'].value_counts())", "+   print(df['ROADWAY_SURFACE_COND'].value_counts())", "+   print(df['ROAD_DEFECT'].value_counts())", "+   print(df['ROADWAY_SURFACE_COND'].value_counts())", "+"], "sub": ["-  print(df[df['POSTED_SPEED_LIMIT'] == 0])"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 18:12:03 2021 -0500", "msg": "1637968323.007025_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+", "+", "+   #trying to find a reasonable replacaement for these ones", "+   print(df['WEATHER_CONDITION'].value_counts())", "+   print(df['LIGHTNING_CONDITION'].value_counts())", "+   print(df['TRAFFICWAY_TYPE'].value_counts())", "+   print(df['ALIGNMENT'].value_counts())", "+   print(df['ROADWAY_SURFACE_COND'].value_counts())", "+   print(df['ROAD_DEFECT'].value_counts())", "+   print(df['ROADWAY_SURFACE_COND'].value_counts())", "+"], "sub": ["-  print(df[df['POSTED_SPEED_LIMIT'] == 0])"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637966344.949409 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 17:39:11 2021 -0500", "msg": "1637966344.949409_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637966344.949409 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+      print('Median -',df[column].median())"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 17:39:04 2021 -0500", "msg": "1637966344.949409_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+      print('Median -',df[column].median())"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637965606.7678132 , error_code: 0"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 17:26:53 2021 -0500", "msg": "1637965606.7678132_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637965606.7678132 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/run.py b/explore/run.py", "add": ["+COMPILER_COMMAND = 'python3' # replace with whatever usually used in the commandline ex. python3"], "sub": ["-COMPILER_COMMAND = 'python' # replace with whatever usually used in the commandline ex. python3"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 17:26:46 2021 -0500", "msg": "1637965606.7678132_start"}, {"diffs": [{"files": "diff --git a/explore/run.py b/explore/run.py", "add": ["+COMPILER_COMMAND = 'python3' # replace with whatever usually used in the commandline ex. python3"], "sub": ["-COMPILER_COMMAND = 'python' # replace with whatever usually used in the commandline ex. python3"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1637965543.920764 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 17:25:44 2021 -0500", "msg": "1637965543.920764_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1637965543.920764 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1637965300.411895 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 17:21:40 2021 -0500", "msg": "1637965300.411895_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1637965300.411895 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1637965253.215038 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 17:20:53 2021 -0500", "msg": "1637965253.215038_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1637965253.215038 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1637965136.442868 , error_code: 1"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 17:18:56 2021 -0500", "msg": "1637965136.442868_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , False, 1637965136.442868 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.[y , True, 1637965133.794755 , error_code: 2"], "sub": []}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 17:18:53 2021 -0500", "msg": "1637965133.794755_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.[y , True, 1637965133.794755 , error_code: 2"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+from pandas.api.types import is_numeric_dtype", "+", "+  df = pd.read_csv(filename)", "+  print(df.columns)", "+  print(df)", "+", "+  for column in df.columns:", "+    print('Column: ', column)", "+    print('Data type -  ', df.dtypes[column])", "+    if is_numeric_dtype(df[column]):", "+      print('Mean -',df[column].mean())", "+      print('STD -',df[column].std())", "+      print('Range -',df[column].min(), df[column].max())", "+      print('Zero entries - ', (df[column] == 0).sum())", "+", "+    else:", "+      print(\"'Unknown' entries - \", (df[column] == 'UNKNOWN').sum())", "+    print('na entries -',df[column].isna().sum())", "+", "+    print('---')", "+", "+  #investigating further to find potential missing vals for cases in whihc it wasn't clear above", "+  print(df['FIRST_CRASH_TYPE'].unique())", "+  print(df['ALIGNMENT'].unique())", "+  print(df['CRASH_TYPE'].unique())", "+  print(df['DAMAGE'].unique())", "+  print(df['STREET_NO'].unique())", "+  print(df['STREET_NAME'].unique())", "+  print(df[df['POSTED_SPEED_LIMIT'] == 0])", "+", "+", "+  #plt.scatter(df['A'],df['B'])", "+    df = load('data_2.csv')"], "sub": ["-  plt.scatter(df['A'],df['B'])", "-    df = load('data.csv')"]}], "author": "Hadleigh-Schwartz <hadleigh.schwartz@gmail.com>", "date": "Fri Nov 26 17:18:53 2021 -0500", "msg": "1637965133.794755_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+from pandas.api.types import is_numeric_dtype", "+", "+  df = pd.read_csv(filename)", "+  print(df.columns)", "+  print(df)", "+", "+  for column in df.columns:", "+    print('Column: ', column)", "+    print('Data type -  ', df.dtypes[column])", "+    if is_numeric_dtype(df[column]):", "+      print('Mean -',df[column].mean())", "+      print('STD -',df[column].std())", "+      print('Range -',df[column].min(), df[column].max())", "+      print('Zero entries - ', (df[column] == 0).sum())", "+", "+    else:", "+      print(\"'Unknown' entries - \", (df[column] == 'UNKNOWN').sum())", "+    print('na entries -',df[column].isna().sum())", "+", "+    print('---')", "+", "+  #investigating further to find potential missing vals for cases in whihc it wasn't clear above", "+  print(df['FIRST_CRASH_TYPE'].unique())", "+  print(df['ALIGNMENT'].unique())", "+  print(df['CRASH_TYPE'].unique())", "+  print(df['DAMAGE'].unique())", "+  print(df['STREET_NO'].unique())", "+  print(df['STREET_NAME'].unique())", "+  print(df[df['POSTED_SPEED_LIMIT'] == 0])", "+", "+", "+  #plt.scatter(df['A'],df['B'])", "+    df = load('data_2.csv')"], "sub": ["-  plt.scatter(df['A'],df['B'])", "-    df = load('data.csv')"]}, {"files": "diff --git a/.DS_Store b/.DS_Store", "add": [], "sub": []}, {"files": "diff --git a/.gitignore b/.gitignore", "add": ["+*.csv"], "sub": []}, {"files": "diff --git a/README.md b/README.md", "add": ["+# README", "+", "+cnet_id: #", "+", "+name: #"], "sub": []}, {"files": "diff --git a/explore/data.csv b/explore/data.csv", "add": ["+A,B", "+1,2", "+3,4", "+5,0"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+'''load.py Load loads the dataset, cleans it, and generates a new clean", "+csv file.", "+'''", "+", "+#standard imports", "+import pandas as pd", "+", "+", "+def load(filename):", "+  '''load(filename) takes as input a filename and loads a dataframe.", "+  '''", "+  return pd.read_csv(filename) #demo", "+", "+", "+def clean(df):", "+  '''clean(df) takes as input a dataframe and fixes any data errors", "+     *that might affect your results*. it returns a copy of the dataframe", "+     without errors.", "+  '''", "+", "+  return df #demo", "+", "+", "+#The main() function  of this program", "+", "+if __name__ == \"__main__\":", "+    df = load('data_2.csv')", "+    cdf = clean(df)", "+    cdf.to_csv('clean.csv')"], "sub": []}, {"files": "diff --git a/explore/plot_2.py b/explore/plot_2.py", "add": ["+'''plot.py Plot loads data from the clean csv file and produces a plot that is saved.", "+'''", "+", "+#standard imports", "+import pandas as pd", "+import matplotlib.pyplot as plt", "+", "+", "+def plot(df):", "+  '''plot(df) takes as input a clean dataframe and generates a plot. The", "+  style of the plot and variables are up to you.", "+  '''", "+  plt.scatter(df['A'],df['B'])", "+  return None", "+", "+", "+", "+#The main() function  of this program", "+if __name__ == \"__main__\":", "+    cdf = pd.read_csv('clean.csv')", "+    plot(cdf)", "+    plt.savefig('plot_2.png')"], "sub": []}, {"files": "diff --git a/explore/plot_3.py b/explore/plot_3.py", "add": ["+'''plot.py Plot loads data from the clean csv file and produces a plot that is saved.", "+'''", "+", "+#standard imports", "+import pandas as pd", "+import matplotlib.pyplot as plt", "+", "+", "+def plot(df):", "+  '''plot(df) takes as input a clean dataframe and generates a plot. The", "+  style of the plot and variables are up to you.", "+  '''", "+  plt.scatter(df['A'],df['B'])", "+  return None", "+", "+", "+", "+#The main() function  of this program", "+if __name__ == \"__main__\":", "+    cdf = pd.read_csv('clean.csv')", "+    plot(cdf)", "+    plt.savefig('plot_3.png')"], "sub": []}, {"files": "diff --git a/explore/plot_4.py b/explore/plot_4.py", "add": ["+'''plot.py Plot loads data from the clean csv file and produces a plot that is saved.", "+'''", "+", "+#standard imports", "+import pandas as pd", "+import matplotlib.pyplot as plt", "+", "+", "+def plot(df):", "+  '''plot(df) takes as input a clean dataframe and generates a plot. The", "+  style of the plot and variables are up to you.", "+  '''", "+  plt.scatter(df['A'],df['B'])", "+  return None", "+", "+", "+", "+#The main() function  of this program", "+if __name__ == \"__main__\":", "+    cdf = pd.read_csv('clean.csv')", "+    plot(cdf)", "+    plt.savefig('plot_4.png')"], "sub": []}, {"files": "diff --git a/explore/run.py b/explore/run.py", "add": ["+\"\"\"This python program executes your code", "+\"\"\"", "+", "+from git import Repo", "+import os", "+import time", "+import sys", "+import subprocess", "+", "+", "+#advanced feature change at your own risk", "+COMPILER_COMMAND = 'python' # replace with whatever usually used in the commandline ex. python3", "+", "+", "+", "+def check_diff(repo):", "+    hcommit = repo.head.commit", "+", "+    diffs = hcommit.diff(None)", "+", "+    if len(diffs) == 0:", "+        return False", "+    else:", "+        return True", "+", "+", "+def add_commit(id, check_changed = True, push = True):", "+    \"\"\"", "+    Add current changes and commit", "+    \"\"\"", "+    # need to check if anything in repo has changed", "+    repo = Repo(os.path.dirname(os.getcwd())) #changed to look at the parent", "+", "+    if check_changed:", "+        changed = check_diff(repo)", "+    else:", "+        changed = True", "+", "+    if changed:", "+        repo.git.add('.')", "+", "+        repo.git.commit('-m', id)", "+        if push:", "+            repo.remotes.origin.push()", "+        return changed", "+", "+    else:", "+        return changed", "+", "+", "+if __name__ == '__main__':", "+", "+    ##error checking", "+    if len(sys.argv) == 1:", "+        print(\"You must run the program as follows:\\n python run.py scratch.py \\n or \\n python run.py load.py \\n or \\n python run.py plot.py\")", "+        exit()", "+", "+", "+    id = str(time.time())", "+    committed = add_commit(id + '_start', push = False)", "+", "+    command = [COMPILER_COMMAND] + sys.argv[1:]", "+", "+    process = subprocess.run(command)", "+", "+    with open('./runs.txt', 'a') as f:", "+        record = '{} , {}, {} , error_code: {} \\n'.format(sys.argv[1], committed, id, process.returncode)", "+        f.write(record)", "+", "+    add_commit(id + '_end', check_changed = False, push=True)"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": [], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+'''scratch.py", "+", "+You will write down any \"scratch\" code that you use to explore the dataset in", "+this file. This code does not produce any outputs (it does not modify any files)", "+but allows you to explore the data. We're separating this code from the rest because", "+it allows us to understand your thought process during data exploration.", "+", "+*Remember to replace the return statements with your code*", "+'''", "+", "+#standard imports", "+import pandas as pd", "+import matplotlib.pyplot as plt", "+", "+", "+#TODO 1.", "+def load(filename):", "+  '''load(filename) takes as input a filename and loads a dataframe.", "+  '''", "+  return pd.read_csv(filename) #demo", "+", "+def clean(df):", "+  '''clean(df) takes as input a dataframe and fixes any data errors", "+     *that might affect your results*. it returns a copy of the dataframe", "+     without errors.", "+  '''", "+", "+  return df #demo", "+", "+", "+#TODO 2.", "+def plot(df):", "+  '''plot(df) takes as input a clean dataframe and generates a plot. The", "+  style of the plot and variables are up to you.", "+  '''", "+", "+  plt.scatter(df['A'],df['B'])", "+  return None", "+", "+", "+", "+#The main() function  of this program", "+", "+if __name__ == \"__main__\":", "+    df = load('data.csv')", "+    cdf = clean(df)", "+    plot(cdf)", "+    plt.show()", "+", "+"], "sub": []}, {"files": "diff --git a/requirements.txt b/requirements.txt", "add": ["+appnope==0.1.2", "+argon2-cffi==20.1.0", "+async-generator==1.10", "+attrs==21.2.0", "+backcall==0.2.0", "+bitstring==3.1.9", "+bleach==3.3.0", "+cffi==1.14.5", "+click==8.0.0", "+cloudpickle==1.6.0", "+cycler==0.10.0", "+dask==2021.4.1", "+decorator==5.0.7", "+defusedxml==0.7.1", "+distributed==2021.4.1", "+entrypoints==0.3", "+fsspec==2021.5.0", "+gitdb==4.0.9", "+GitPython==3.1.24", "+graphviz==0.16", "+HeapDict==1.0.1", "+ipykernel==5.5.5", "+ipython==7.23.1", "+ipython-genutils==0.2.0", "+ipywidgets==7.6.3", "+jedi==0.18.0", "+Jinja2==3.0.0", "+joblib==1.0.1", "+jsonschema==3.2.0", "+jupyter==1.0.0", "+jupyter-client==6.1.12", "+jupyter-console==6.4.0", "+jupyter-core==4.7.1", "+jupyterlab-pygments==0.1.2", "+jupyterlab-widgets==1.0.0", "+kiwisolver==1.3.1", "+locket==0.2.1", "+MarkupSafe==2.0.0", "+matplotlib==3.4.2", "+matplotlib-inline==0.1.2", "+mistune==0.8.4", "+msgpack==1.0.2", "+nbclient==0.5.3", "+nbconvert==6.0.7", "+nbformat==5.1.3", "+nest-asyncio==1.5.1", "+notebook==6.3.0", "+numpy==1.20.3", "+packaging==20.9", "+pandas==1.2.4", "+pandocfilters==1.4.3", "+parso==0.8.2", "+partd==1.2.0", "+pexpect==4.8.0", "+pickleshare==0.7.5", "+Pillow==8.2.0", "+prometheus-client==0.10.1", "+prompt-toolkit==3.0.18", "+psutil==5.8.0", "+ptyprocess==0.7.0", "+pycparser==2.20", "+Pygments==2.9.0", "+pyparsing==2.4.7", "+pyrsistent==0.17.3", "+python-dateutil==2.8.1", "+pytz==2021.1", "+PyYAML==5.4.1", "+pyzmq==22.0.3", "+qtconsole==5.1.0", "+QtPy==1.9.0", "+scikit-learn==0.24.2", "+scipy==1.6.3", "+Send2Trash==1.5.0", "+six==1.16.0", "+sklearn==0.0", "+smmap==5.0.0", "+sortedcontainers==2.3.0", "+tblib==1.7.0", "+terminado==0.9.5", "+testpath==0.4.4", "+threadpoolctl==2.1.0", "+toolz==0.11.1", "+tornado==6.1", "+traitlets==5.0.5", "+typing-extensions==3.10.0.2", "+wcwidth==0.2.5", "+webencodings==0.5.1", "+widgetsnbextension==3.5.1", "+zict==2.0.0"], "sub": []}], "author": "github-classroom[bot] <66690702+github-classroom[bot]@users.noreply.github.com>", "date": "Fri Nov 26 01:36:00 2021 +0000", "msg": "Initial commit"}]