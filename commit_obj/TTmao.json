[{"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638387904.4110758 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux7.cs.uchicago.edu>", "date": "Wed Dec 1 13:45:11 2021 -0600", "msg": "1638387904.4110758_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638387904.4110758 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+"], "sub": ["-    print(df['Downtown_binary'].value_counts())"]}], "author": "Chenwei Tang <chenweit@linux7.cs.uchicago.edu>", "date": "Wed Dec 1 13:45:04 2021 -0600", "msg": "1638387904.4110758_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+"], "sub": ["-    print(df['Downtown_binary'].value_counts())"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638387873.3303452 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux7.cs.uchicago.edu>", "date": "Wed Dec 1 13:44:41 2021 -0600", "msg": "1638387873.3303452_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638387873.3303452 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/Spuriou.png b/explore/Spuriou.png", "add": [], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+import scipy.stats", "+    # Spurious correlation", "+", "+    # We test whether being at downtown or not is correlated with crash frequency", "+    # First make binary variable of whether a crash is in downtown, then calculate the frequency of crash", "+    # devided by \"area\" of downtown/not-downtown.", "+    # Bar-chart saved as Spurious.png", "+", "+    df['Downtown_binary'] = ((df['LATITUDE'] >= 41.9) & (df['LATITUDE'] <= 41.95) & (df['LONGITUDE'] >= -87.7) & (df['LONGITUDE'] <= -86.65))*1.0", "+    area_downtown = (41.95-41.9)*(-87.65+87.7)", "+    area_total = (df['LATITUDE'].max()-df['LATITUDE'].min())*(df['LONGITUDE'].max()-df['LONGITUDE'].min())", "+    area_not_downtown = area_total-area_downtown", "+    print(df['Downtown_binary'].value_counts())", "+    plt.bar(['Out of Downtown','Downtown'],[df['Downtown_binary'].value_counts()[0]/area_not_downtown, df['Downtown_binary'].value_counts()[1]/area_downtown])", "+    plt.ylabel('Frequency/Area')", "+    plt.savefig('Spuriou.png')", "+"], "sub": ["-", "-", "-    plot(df)", "-"]}], "author": "Chenwei Tang <chenweit@linux7.cs.uchicago.edu>", "date": "Wed Dec 1 13:44:33 2021 -0600", "msg": "1638387873.3303452_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+import scipy.stats", "+    # Spurious correlation", "+", "+    # We test whether being at downtown or not is correlated with crash frequency", "+    # First make binary variable of whether a crash is in downtown, then calculate the frequency of crash", "+    # devided by \"area\" of downtown/not-downtown.", "+    # Bar-chart saved as Spurious.png", "+", "+    df['Downtown_binary'] = ((df['LATITUDE'] >= 41.9) & (df['LATITUDE'] <= 41.95) & (df['LONGITUDE'] >= -87.7) & (df['LONGITUDE'] <= -86.65))*1.0", "+    area_downtown = (41.95-41.9)*(-87.65+87.7)", "+    area_total = (df['LATITUDE'].max()-df['LATITUDE'].min())*(df['LONGITUDE'].max()-df['LONGITUDE'].min())", "+    area_not_downtown = area_total-area_downtown", "+    print(df['Downtown_binary'].value_counts())", "+    plt.bar(['Out of Downtown','Downtown'],[df['Downtown_binary'].value_counts()[0]/area_not_downtown, df['Downtown_binary'].value_counts()[1]/area_downtown])", "+    plt.ylabel('Frequency/Area')", "+    plt.savefig('Spuriou.png')", "+"], "sub": ["-", "-", "-    plot(df)", "-"]}, {"files": "diff --git a/explore/plot_4.png b/explore/plot_4.png", "add": [], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_4.py , False, 1638373915.2834873 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:52:00 2021 -0600", "msg": "1638373915.2834873_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_4.py , False, 1638373915.2834873 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/plot_3.png b/explore/plot_3.png", "add": [], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_3.py , False, 1638373899.6075945 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:51:48 2021 -0600", "msg": "1638373899.6075945_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_3.py , False, 1638373899.6075945 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_2.py , False, 1638373886.2721326 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:51:35 2021 -0600", "msg": "1638373886.2721326_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_2.py , False, 1638373886.2721326 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1638373851.7935817 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:51:14 2021 -0600", "msg": "1638373851.7935817_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , True, 1638373851.7935817 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+", "+  # Remove all rows with latitute or longitude as 0", "+", "+  for col in ['LATITUDE','LONGITUDE']:", "+    df = df[~(df[col] == 0)]"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:50:51 2021 -0600", "msg": "1638373851.7935817_start"}, {"diffs": [{"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+", "+  # Remove all rows with latitute or longitude as 0", "+", "+  for col in ['LATITUDE','LONGITUDE']:", "+    df = df[~(df[col] == 0)]"], "sub": []}, {"files": "diff --git a/explore/plot_4.png b/explore/plot_4.png", "add": [], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_4.py , True, 1638373779.3106303 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:49:44 2021 -0600", "msg": "1638373779.3106303_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_4.py , True, 1638373779.3106303 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/plot_4.py b/explore/plot_4.py", "add": ["+  plt.figure(figsize=(10,10))"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:49:39 2021 -0600", "msg": "1638373779.3106303_start"}, {"diffs": [{"files": "diff --git a/explore/plot_4.py b/explore/plot_4.py", "add": ["+  plt.figure(figsize=(10,10))"], "sub": []}, {"files": "diff --git a/explore/plot_4.png b/explore/plot_4.png", "add": [], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_4.py , True, 1638373728.1246865 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:48:53 2021 -0600", "msg": "1638373728.1246865_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_4.py , True, 1638373728.1246865 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/plot_4.py b/explore/plot_4.py", "add": ["+import numpy as np", "+  x = df['LATITUDE']", "+  y = df['LONGITUDE']", "+  x_bin = np.linspace(min(x),max(x),200)", "+  y_bin = np.linspace(min(y),max(y),200)", "+", "+  H, x_bin,y_bin = np.histogram2d(x,y,bins=(x_bin,y_bin))", "+  plt.imshow(H, interpolation='nearest', origin='lower',", "+        extent=[x_bin[0], x_bin[-1], y_bin[0], y_bin[-1]])", "+  plt.colorbar()", "+  plt.title('Frequency Heatmap')", "+  plt.xlabel('Latitude')", "+  plt.ylabel('Longitude')", "+", "+  return plt", "+"], "sub": ["-  plt.scatter(df['A'],df['B'])", "-  return None"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  # Remove all rows with latitute or longitude as 0", "+", "+  for col in ['LATITUDE','LONGITUDE']:", "+    df = df[~(df[col] == 0)]", "+  # plot_2: 3 histograms", "+  # plot_3: 3 stacked histograms", "+  # df['Severity'] = df['INJURIES_FATAL']*10+5*df['INJURIES_INCAPACITATING']+3*df['INJURIES_NON_INCAPACITATING']", "+  # + 2*df['INJURIES_REPORTED_NOT_EVIDENT'] + 1*df['INJURIES_NO_INDICATION']", "+  # tested = ['WEATHER_CONDITION','LIGHTING_CONDITION','ROADWAY_SURFACE_COND']", "+  # fig = plt.figure(figsize=(8,15))", "+  # plt.suptitle('Condition and Severity')", "+  # for i in range(3):", "+  #   col = tested[i]", "+  #   values = df[col].unique()", "+  #   fig.add_subplot(3,1,i+1)", "+  #   for v in values:", "+  #     plt.hist(df[df[col]==v]['Severity'],np.arange(0,20,1),label=v)", "+  #   plt.xlabel('Severity')", "+  #   plt.ylabel('Frequency')", "+  #   plt.yscale('log')", "+  #   plt.title(tested[i])", "+  #   plt.legend()", "+  # fig.savefig('test.png')", "+", "+  # plot_4: 2d heatmap", "+", "+  x = df['LATITUDE']", "+  y = df['LONGITUDE']", "+  x_bin = np.linspace(min(x),max(x),200)", "+  y_bin = np.linspace(min(y),max(y),200)", "+", "+  H, x_bin,y_bin = np.histogram2d(x,y,bins=(x_bin,y_bin))", "+  plt.imshow(H, interpolation='nearest', origin='lower',", "+        extent=[x_bin[0], x_bin[-1], y_bin[0], y_bin[-1]])", "+  plt.colorbar()", "+  plt.title('Frequency Heatmap')", "+  plt.xlabel('Latitude')", "+  plt.ylabel('Longitude')", "+", "+  plt.savefig('test.png')", "+    print(df.head())", "+    print(df.shape)", "+    # Check datatype of each column", "+    # Identify \"missing values\" representations for object columns manually by printing out all possible values", "+    # Define \"UNKNOWN\" to be missing values for object columns besides NaN", "+    # Identify number of missing values for number columns", "+    plot(df)", "+", "+"], "sub": ["-  # plot_1: 3 histograms", "-  # plot_2: 3 stacked histograms", "-  df['Severity'] = df['INJURIES_FATAL']*10+5*df['INJURIES_INCAPACITATING']+3*df['INJURIES_NON_INCAPACITATING']", "-  + 2*df['INJURIES_REPORTED_NOT_EVIDENT'] + 1*df['INJURIES_NO_INDICATION']", "-  tested = ['WEATHER_CONDITION','LIGHTING_CONDITION','ROADWAY_SURFACE_COND']", "-  fig = plt.figure(figsize=(8,15))", "-  plt.suptitle('Condition and Severity')", "-  for i in range(3):", "-    col = tested[i]", "-    values = df[col].unique()", "-    fig.add_subplot(3,1,i+1)", "-    for v in values:", "-      plt.hist(df[df[col]==v]['Severity'],np.arange(0,20,1),label=v)", "-    plt.xlabel('Severity')", "-    plt.ylabel('Frequency')", "-    plt.yscale('log')", "-    plt.title(tested[i])", "-    plt.legend()", "-  fig.savefig('test.png')", "-    # print(df.head())", "-    # print(df.shape)", "-    # # Check datatype of each column", "-    # # Identify \"missing values\" representations for object columns manually by printing out all possible values", "-    # # Define \"UNKNOWN\" to be missing values for object columns besides NaN", "-    # # Identify number of missing values for number columns", "-    plot(df)"]}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:48:48 2021 -0600", "msg": "1638373728.1246865_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  # Remove all rows with latitute or longitude as 0", "+", "+  for col in ['LATITUDE','LONGITUDE']:", "+    df = df[~(df[col] == 0)]", "+  # plot_2: 3 histograms", "+  # plot_3: 3 stacked histograms", "+  # df['Severity'] = df['INJURIES_FATAL']*10+5*df['INJURIES_INCAPACITATING']+3*df['INJURIES_NON_INCAPACITATING']", "+  # + 2*df['INJURIES_REPORTED_NOT_EVIDENT'] + 1*df['INJURIES_NO_INDICATION']", "+  # tested = ['WEATHER_CONDITION','LIGHTING_CONDITION','ROADWAY_SURFACE_COND']", "+  # fig = plt.figure(figsize=(8,15))", "+  # plt.suptitle('Condition and Severity')", "+  # for i in range(3):", "+  #   col = tested[i]", "+  #   values = df[col].unique()", "+  #   fig.add_subplot(3,1,i+1)", "+  #   for v in values:", "+  #     plt.hist(df[df[col]==v]['Severity'],np.arange(0,20,1),label=v)", "+  #   plt.xlabel('Severity')", "+  #   plt.ylabel('Frequency')", "+  #   plt.yscale('log')", "+  #   plt.title(tested[i])", "+  #   plt.legend()", "+  # fig.savefig('test.png')", "+", "+  # plot_4: 2d heatmap", "+", "+  x = df['LATITUDE']", "+  y = df['LONGITUDE']", "+  x_bin = np.linspace(min(x),max(x),200)", "+  y_bin = np.linspace(min(y),max(y),200)", "+", "+  H, x_bin,y_bin = np.histogram2d(x,y,bins=(x_bin,y_bin))", "+  plt.imshow(H, interpolation='nearest', origin='lower',", "+        extent=[x_bin[0], x_bin[-1], y_bin[0], y_bin[-1]])", "+  plt.colorbar()", "+  plt.title('Frequency Heatmap')", "+  plt.xlabel('Latitude')", "+  plt.ylabel('Longitude')", "+", "+  plt.savefig('test.png')", "+    print(df.head())", "+    print(df.shape)", "+    # Check datatype of each column", "+    # Identify \"missing values\" representations for object columns manually by printing out all possible values", "+    # Define \"UNKNOWN\" to be missing values for object columns besides NaN", "+    # Identify number of missing values for number columns", "+    plot(df)", "+", "+"], "sub": ["-  # plot_1: 3 histograms", "-  # plot_2: 3 stacked histograms", "-  df['Severity'] = df['INJURIES_FATAL']*10+5*df['INJURIES_INCAPACITATING']+3*df['INJURIES_NON_INCAPACITATING']", "-  + 2*df['INJURIES_REPORTED_NOT_EVIDENT'] + 1*df['INJURIES_NO_INDICATION']", "-  tested = ['WEATHER_CONDITION','LIGHTING_CONDITION','ROADWAY_SURFACE_COND']", "-  fig = plt.figure(figsize=(8,15))", "-  plt.suptitle('Condition and Severity')", "-  for i in range(3):", "-    col = tested[i]", "-    values = df[col].unique()", "-    fig.add_subplot(3,1,i+1)", "-    for v in values:", "-      plt.hist(df[df[col]==v]['Severity'],np.arange(0,20,1),label=v)", "-    plt.xlabel('Severity')", "-    plt.ylabel('Frequency')", "-    plt.yscale('log')", "-    plt.title(tested[i])", "-    plt.legend()", "-  fig.savefig('test.png')", "-    # print(df.head())", "-    # print(df.shape)", "-    # # Check datatype of each column", "-    # # Identify \"missing values\" representations for object columns manually by printing out all possible values", "-    # # Define \"UNKNOWN\" to be missing values for object columns besides NaN", "-    # # Identify number of missing values for number columns", "-    plot(df)"]}, {"files": "diff --git a/explore/plot_3.png b/explore/plot_3.png", "add": [], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_3.py , True, 1638371108.724982 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:05:17 2021 -0600", "msg": "1638371108.724982_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_3.py , True, 1638371108.724982 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/plot_3.py b/explore/plot_3.py", "add": ["+  return fig"], "sub": ["-    return fig"]}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:05:08 2021 -0600", "msg": "1638371108.724982_start"}, {"diffs": [{"files": "diff --git a/explore/plot_3.py b/explore/plot_3.py", "add": ["+  return fig"], "sub": ["-    return fig"]}, {"files": "diff --git a/explore/plot_3.png b/explore/plot_3.png", "add": [], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_3.py , True, 1638371073.983077 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:04:41 2021 -0600", "msg": "1638371073.983077_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_3.py , True, 1638371073.983077 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/plot_3.py b/explore/plot_3.py", "add": ["+      plt.hist(df[df[col]==v]['Severity'],np.arange(0,20,1),label=v)", "+    plt.ylabel('Frequency')", "+    plt.yscale('log')", "+", "+    return fig"], "sub": ["-      count, bins_count = np.histogram(df[df[col]==v]['Severity'],bins=100)", "-      pdf = count/sum(count)", "-      cdf = np.cumsum(pdf)", "-      plt.plot(bins_count[1:],cdf,label=v)", "-    plt.xlim(0,20)", "-    plt.ylim(0.8,1.01)", "-    plt.ylabel('cdf')", "-  return fig"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+      plt.hist(df[df[col]==v]['Severity'],np.arange(0,20,1),label=v)", "+    plt.ylabel('Frequency')", "+    plt.yscale('log')"], "sub": ["-      count, bins_count = np.histogram(df[df[col]==v]['Severity'],bins=100)", "-      pdf = count/sum(count)", "-      cdf = np.cumsum(pdf)", "-      plt.plot(bins_count[1:],cdf,label=v)", "-    plt.xlim(0,20)", "-    plt.ylim(0.8,1.01)", "-    plt.ylabel('cdf')"]}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 09:04:34 2021 -0600", "msg": "1638371073.983077_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+      plt.hist(df[df[col]==v]['Severity'],np.arange(0,20,1),label=v)", "+    plt.ylabel('Frequency')", "+    plt.yscale('log')"], "sub": ["-      count, bins_count = np.histogram(df[df[col]==v]['Severity'],bins=100)", "-      pdf = count/sum(count)", "-      cdf = np.cumsum(pdf)", "-      plt.plot(bins_count[1:],cdf,label=v)", "-    plt.xlim(0,20)", "-    plt.ylim(0.8,1.01)", "-    plt.ylabel('cdf')"]}, {"files": "diff --git a/explore/plot_3.png b/explore/plot_3.png", "add": [], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_3.py , True, 1638370209.786421 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 08:50:17 2021 -0600", "msg": "1638370209.786421_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_3.py , True, 1638370209.786421 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/plot_3.py b/explore/plot_3.py", "add": ["+import numpy as np", "+  df['Severity'] = df['INJURIES_FATAL']*10+5*df['INJURIES_INCAPACITATING']+3*df['INJURIES_NON_INCAPACITATING']", "+  + 2*df['INJURIES_REPORTED_NOT_EVIDENT'] + 1*df['INJURIES_NO_INDICATION']", "+", "+  tested = ['WEATHER_CONDITION','LIGHTING_CONDITION','ROADWAY_SURFACE_COND']", "+", "+  fig = plt.figure(figsize=(8,15))", "+  plt.suptitle('Condition and Severity')", "+", "+  for i in range(3):", "+    col = tested[i]", "+    values = df[col].unique()", "+    fig.add_subplot(3,1,i+1)", "+    for v in values:", "+      count, bins_count = np.histogram(df[df[col]==v]['Severity'],bins=100)", "+      pdf = count/sum(count)", "+      cdf = np.cumsum(pdf)", "+      plt.plot(bins_count[1:],cdf,label=v)", "+    plt.xlim(0,20)", "+    plt.ylim(0.8,1.01)", "+    plt.xlabel('Severity')", "+    plt.ylabel('cdf')", "+    plt.title(tested[i])", "+    plt.legend()", "+  return fig", "+"], "sub": ["-  plt.scatter(df['A'],df['B'])", "-  return None"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+import numpy as np", "+", "+", "+  # plot_2: 3 stacked histograms", "+", "+  # Calculate severity and bin", "+", "+  df['Severity'] = df['INJURIES_FATAL']*10+5*df['INJURIES_INCAPACITATING']+3*df['INJURIES_NON_INCAPACITATING']", "+  + 2*df['INJURIES_REPORTED_NOT_EVIDENT'] + 1*df['INJURIES_NO_INDICATION']", "+", "+  tested = ['WEATHER_CONDITION','LIGHTING_CONDITION','ROADWAY_SURFACE_COND']", "+", "+  fig = plt.figure(figsize=(8,15))", "+  plt.suptitle('Condition and Severity')", "+", "+  for i in range(3):", "+    col = tested[i]", "+    values = df[col].unique()", "+    fig.add_subplot(3,1,i+1)", "+    for v in values:", "+      count, bins_count = np.histogram(df[df[col]==v]['Severity'],bins=100)", "+      pdf = count/sum(count)", "+      cdf = np.cumsum(pdf)", "+      plt.plot(bins_count[1:],cdf,label=v)", "+    plt.xlim(0,20)", "+    plt.ylim(0.8,1.01)", "+    plt.xlabel('Severity')", "+    plt.ylabel('cdf')", "+    plt.title(tested[i])", "+    plt.legend()", "+", "+", "+", "+  fig.savefig('test.png')", "+", "+"], "sub": ["-"]}, {"files": "diff --git a/explore/test.png b/explore/test.png", "add": [], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 08:50:10 2021 -0600", "msg": "1638370209.786421_start"}, {"diffs": [{"files": "diff --git a/explore/test.png b/explore/test.png", "add": [], "sub": []}, {"files": "diff --git a/explore/plot_2.png b/explore/plot_2.png", "add": [], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_2.py , True, 1638359693.6622522 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 05:55:01 2021 -0600", "msg": "1638359693.6622522_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+plot_2.py , True, 1638359693.6622522 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/plot_2.png b/explore/plot_2.png", "add": [], "sub": []}, {"files": "diff --git a/explore/plot_2.py b/explore/plot_2.py", "add": ["+  fig = plt.figure(figsize=(12,20))", "+  tested = ['WEATHER_CONDITION','LIGHTING_CONDITION','ROADWAY_SURFACE_COND']", "+  plt.suptitle('Condition and Frequency')", "+", "+  for i in range(3):", "+", "+    values = df[tested[i]].unique()", "+    nums = [df[tested[i]].value_counts()[v] for v in values]", "+", "+    fig.add_subplot(3,1,i+1)", "+    plt.bar(values,nums)", "+    plt.yscale('log')", "+    plt.xticks(ticks=range(len(values)), labels=values, rotation=20)", "+    plt.title(tested[i])", "+    plt.ylabel('Frequency')", "+", "+  return fig"], "sub": ["-  plt.scatter(df['A'],df['B'])", "-  return None"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+", "+  # plot_1: 3 histograms", "+  # fig = plt.figure(figsize=(12,22))", "+  # tested = ['WEATHER_CONDITION','LIGHTING_CONDITION','ROADWAY_SURFACE_COND']", "+  # plt.suptitle('Condition and Frequency')", "+", "+  # for i in range(3):", "+", "+  #   values = df[tested[i]].unique()", "+  #   nums = [df[tested[i]].value_counts()[v] for v in values]", "+", "+  #   fig.add_subplot(3,1,i+1)", "+  #   plt.bar(values,nums)", "+  #   plt.yscale('log')", "+  #   plt.xticks(ticks=range(len(values)), labels=values, rotation=20)", "+  #   plt.title(tested[i])", "+  #   plt.ylabel('Frequency')", "+", "+  # fig.savefig('test.png')", "+", "+    # print(df.head())", "+    # print(df.shape)", "+", "+    # # Check datatype of each column", "+    # # Identify \"missing values\" representations for object columns manually by printing out all possible values", "+    # # Define \"UNKNOWN\" to be missing values for object columns besides NaN", "+    # # Identify number of missing values for number columns", "+", "+    # for col in df.columns:", "+    #   print('Column: ',col)", "+    #   n_missing = df[col].isna().sum()", "+    #   if df[col].dtype == object:", "+    #     if 'UNKNOWN' in df[col].values:", "+    #       n_missing = n_missing + df[col].value_counts()['UNKNOWN']", "+    #   print('Missing Value: ',n_missing)"], "sub": ["-  plt.hist(df['LIGNTING_CONDITION'])", "-    print(df.head())", "-    print(df.shape)", "-", "-    # Check datatype of each column", "-    # Identify \"missing values\" representations for object columns manually by printing out all possible values", "-    # Define \"UNKNOWN\" to be missing values for object columns besides NaN", "-    # Identify number of missing values for number columns", "-", "-    for col in df.columns:", "-      print('Column: ',col)", "-      n_missing = df[col].isna().sum()", "-      if df[col].dtype == object:", "-        if 'UNKNOWN' in df[col].values:", "-          n_missing = n_missing + df[col].value_counts()['UNKNOWN']", "-      print('Missing Value: ',n_missing)", "-    print(df.groupby(['LIGHTING_CONDITION','CRASH_HOUR']).size().unstack(fill_value=0))"]}, {"files": "diff --git a/explore/test.png b/explore/test.png", "add": [], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 05:54:54 2021 -0600", "msg": "1638359693.6622522_start"}, {"diffs": [{"files": "diff --git a/explore/test.png b/explore/test.png", "add": [], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638355152.800405 , error_code: 1"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 04:39:24 2021 -0600", "msg": "1638355152.800405_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638355152.800405 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 04:39:12 2021 -0600", "msg": "1638355152.800405_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638355060.963434 , error_code: 1"], "sub": []}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 04:37:53 2021 -0600", "msg": "1638355060.963434_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1638355060.963434 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  plt.hist(df['LIGNTING_CONDITION'])", "+    plot(df)"], "sub": ["-  plt.scatter(df['A'],df['B'])"]}], "author": "Chenwei Tang <chenweit@linux4.cs.uchicago.edu>", "date": "Wed Dec 1 04:37:41 2021 -0600", "msg": "1638355060.963434_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  plt.hist(df['LIGNTING_CONDITION'])", "+    plot(df)"], "sub": ["-  plt.scatter(df['A'],df['B'])"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , False, 1637998521.8063173 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux2.cs.uchicago.edu>", "date": "Sat Nov 27 01:35:58 2021 -0600", "msg": "1637998521.8063173_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+load.py , False, 1637998521.8063173 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637998496.990349 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux2.cs.uchicago.edu>", "date": "Sat Nov 27 01:35:11 2021 -0600", "msg": "1637998496.990349_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637998496.990349 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+  return pd.read_csv(filename, index_col=0) #demo", "+", "+  # Remove object rows with \"UNKNOWN\"", "+  for col in df.columns:", "+      if df[col].dtype == object:", "+        df = df[df[col] != 'UNKNOWN']", "+", "+  # For rows with CRASH_HOUR at 9-16, remove those with $LIGHTING_CONDITION$ of darkness;", "+  # For rows with CRASH_HOUR at 21-4, remove those with $LIGHTING_CONDITION$ of daylight.", "+", "+  df = df.loc[~((df['CRASH_HOUR'] >= 9) & (df['CRASH_HOUR'] <= 16) & (df['LIGHTING_CONDITION'] == 'DARKNESS'))]", "+  df = df.loc[~((df['CRASH_HOUR'] >= 21) & (df['LIGHTING_CONDITION'] == 'DAYLIGHT'))]", "+  df = df.loc[~((df['CRASH_HOUR'] <= 4) & (df['LIGHTING_CONDITION'] == 'DAYLIGHT'))]", "+", "+  # For all INJURY of NaN, fill them with 0", "+  inj_cols = ['INJURIES_TOTAL','INJURIES_FATAL','INJURIES_INCAPACITATING','INJURIES_NON_INCAPACITATING',", "+  'INJURIES_REPORTED_NOT_EVIDENT','INJURIES_NO_INDICATION']", "+  for cols in inj_cols:", "+    df[col].fillna(0)", "+  # Remove other rows with NaN", "+  for col in df.columns:", "+    df = df[~df[col].isna()]", "+", "+  return df"], "sub": ["-  return pd.read_csv(filename) #demo", "-", "-  return df #demo"]}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  return pd.read_csv(filename, index_col=0) #demo", "+", "+  # Remove object rows with \"UNKNOWN\"", "+  for col in df.columns:", "+      if df[col].dtype == object:", "+        df = df[df[col] != 'UNKNOWN']", "+", "+  # For rows with CRASH_HOUR at 9-16, remove those with $LIGHTING_CONDITION$ of darkness;", "+  # For rows with CRASH_HOUR at 21-4, remove those with $LIGHTING_CONDITION$ of daylight.", "+", "+  df = df.loc[~((df['CRASH_HOUR'] >= 9) & (df['CRASH_HOUR'] <= 16) & (df['LIGHTING_CONDITION'] == 'DARKNESS'))]", "+  df = df.loc[~((df['CRASH_HOUR'] >= 21) & (df['LIGHTING_CONDITION'] == 'DAYLIGHT'))]", "+  df = df.loc[~((df['CRASH_HOUR'] <= 4) & (df['LIGHTING_CONDITION'] == 'DAYLIGHT'))]", "+", "+  # For all INJURY of NaN, fill them with 0", "+  inj_cols = ['INJURIES_TOTAL','INJURIES_FATAL','INJURIES_INCAPACITATING','INJURIES_NON_INCAPACITATING',", "+  'INJURIES_REPORTED_NOT_EVIDENT','INJURIES_NO_INDICATION']", "+  for cols in inj_cols:", "+    df[col].fillna(0)", "+  # Remove other rows with NaN", "+  for col in df.columns:", "+    df = df[~df[col].isna()]", "+", "+    df = clean(load('data_2.csv'))", "+    print(df.shape)", "+", "+    # Check datatype of each column", "+    # Identify \"missing values\" representations for object columns manually by printing out all possible values", "+    # Define \"UNKNOWN\" to be missing values for object columns besides NaN", "+    # Identify number of missing values for number columns", "+", "+    for col in df.columns:", "+      print('Column: ',col)", "+      n_missing = df[col].isna().sum()", "+      if df[col].dtype == object:", "+        if 'UNKNOWN' in df[col].values:", "+          n_missing = n_missing + df[col].value_counts()['UNKNOWN']", "+      print('Missing Value: ',n_missing)", "+", "+    # There are rows with crash hour at 9-16 but reports darkness for lighting,", "+    # or 21-4 but reports daylight. These data does not make sense.", "+    print(df.groupby(['LIGHTING_CONDITION','CRASH_HOUR']).size().unstack(fill_value=0))", "+", "+", "+", "+", "+"], "sub": ["-  return pd.read_csv(filename) #demo", "-    df = load('data_2.csv')"]}], "author": "Chenwei Tang <chenweit@linux2.cs.uchicago.edu>", "date": "Sat Nov 27 01:34:58 2021 -0600", "msg": "1637998496.990349_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+  return pd.read_csv(filename, index_col=0) #demo", "+", "+  # Remove object rows with \"UNKNOWN\"", "+  for col in df.columns:", "+      if df[col].dtype == object:", "+        df = df[df[col] != 'UNKNOWN']", "+", "+  # For rows with CRASH_HOUR at 9-16, remove those with $LIGHTING_CONDITION$ of darkness;", "+  # For rows with CRASH_HOUR at 21-4, remove those with $LIGHTING_CONDITION$ of daylight.", "+", "+  df = df.loc[~((df['CRASH_HOUR'] >= 9) & (df['CRASH_HOUR'] <= 16) & (df['LIGHTING_CONDITION'] == 'DARKNESS'))]", "+  df = df.loc[~((df['CRASH_HOUR'] >= 21) & (df['LIGHTING_CONDITION'] == 'DAYLIGHT'))]", "+  df = df.loc[~((df['CRASH_HOUR'] <= 4) & (df['LIGHTING_CONDITION'] == 'DAYLIGHT'))]", "+", "+  # For all INJURY of NaN, fill them with 0", "+  inj_cols = ['INJURIES_TOTAL','INJURIES_FATAL','INJURIES_INCAPACITATING','INJURIES_NON_INCAPACITATING',", "+  'INJURIES_REPORTED_NOT_EVIDENT','INJURIES_NO_INDICATION']", "+  for cols in inj_cols:", "+    df[col].fillna(0)", "+  # Remove other rows with NaN", "+  for col in df.columns:", "+    df = df[~df[col].isna()]", "+", "+    df = clean(load('data_2.csv'))", "+    print(df.shape)", "+", "+    # Check datatype of each column", "+    # Identify \"missing values\" representations for object columns manually by printing out all possible values", "+    # Define \"UNKNOWN\" to be missing values for object columns besides NaN", "+    # Identify number of missing values for number columns", "+", "+    for col in df.columns:", "+      print('Column: ',col)", "+      n_missing = df[col].isna().sum()", "+      if df[col].dtype == object:", "+        if 'UNKNOWN' in df[col].values:", "+          n_missing = n_missing + df[col].value_counts()['UNKNOWN']", "+      print('Missing Value: ',n_missing)", "+", "+    # There are rows with crash hour at 9-16 but reports darkness for lighting,", "+    # or 21-4 but reports daylight. These data does not make sense.", "+    print(df.groupby(['LIGHTING_CONDITION','CRASH_HOUR']).size().unstack(fill_value=0))", "+", "+", "+", "+", "+"], "sub": ["-  return pd.read_csv(filename) #demo", "-    df = load('data_2.csv')"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637930241.4726791 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux6.cs.uchicago.edu>", "date": "Fri Nov 26 06:37:24 2021 -0600", "msg": "1637930241.4726791_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637930241.4726791 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(df.head())"], "sub": ["-    df.head()"]}], "author": "Chenwei Tang <chenweit@linux6.cs.uchicago.edu>", "date": "Fri Nov 26 06:37:21 2021 -0600", "msg": "1637930241.4726791_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    print(df.head())"], "sub": ["-    df.head()"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637930218.6091905 , error_code: 0"], "sub": []}], "author": "Chenwei Tang <chenweit@linux6.cs.uchicago.edu>", "date": "Fri Nov 26 06:37:01 2021 -0600", "msg": "1637930218.6091905_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637930218.6091905 , error_code: 0"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    df = load('data_2.csv')"], "sub": ["-    df = load('data2.csv')"]}], "author": "Chenwei Tang <chenweit@linux6.cs.uchicago.edu>", "date": "Fri Nov 26 06:36:58 2021 -0600", "msg": "1637930218.6091905_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    df = load('data_2.csv')"], "sub": ["-    df = load('data2.csv')"]}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637929922.0566902 , error_code: 1"], "sub": []}], "author": "Chenwei Tang <chenweit@linux6.cs.uchicago.edu>", "date": "Fri Nov 26 06:32:20 2021 -0600", "msg": "1637929922.0566902_end"}, {"diffs": [{"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": ["+scratch.py , True, 1637929922.0566902 , error_code: 1"], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    df = load('data2.csv')", "+    df.head()"], "sub": ["-    df = load('data.csv')", "-    cdf = clean(df)", "-    plot(cdf)", "-    plt.show()"]}], "author": "Chenwei Tang <chenweit@linux6.cs.uchicago.edu>", "date": "Fri Nov 26 06:32:02 2021 -0600", "msg": "1637929922.0566902_start"}, {"diffs": [{"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+    df = load('data2.csv')", "+    df.head()"], "sub": ["-    df = load('data.csv')", "-    cdf = clean(df)", "-    plot(cdf)", "-    plt.show()"]}, {"files": "diff --git a/.DS_Store b/.DS_Store", "add": [], "sub": []}, {"files": "diff --git a/.gitignore b/.gitignore", "add": ["+*.csv"], "sub": []}, {"files": "diff --git a/README.md b/README.md", "add": ["+# README", "+", "+cnet_id: #", "+", "+name: #"], "sub": []}, {"files": "diff --git a/explore/data.csv b/explore/data.csv", "add": ["+A,B", "+1,2", "+3,4", "+5,0"], "sub": []}, {"files": "diff --git a/explore/load.py b/explore/load.py", "add": ["+'''load.py Load loads the dataset, cleans it, and generates a new clean", "+csv file.", "+'''", "+", "+#standard imports", "+import pandas as pd", "+", "+", "+def load(filename):", "+  '''load(filename) takes as input a filename and loads a dataframe.", "+  '''", "+  return pd.read_csv(filename) #demo", "+", "+", "+def clean(df):", "+  '''clean(df) takes as input a dataframe and fixes any data errors", "+     *that might affect your results*. it returns a copy of the dataframe", "+     without errors.", "+  '''", "+", "+  return df #demo", "+", "+", "+#The main() function  of this program", "+", "+if __name__ == \"__main__\":", "+    df = load('data_2.csv')", "+    cdf = clean(df)", "+    cdf.to_csv('clean.csv')"], "sub": []}, {"files": "diff --git a/explore/plot_2.py b/explore/plot_2.py", "add": ["+'''plot.py Plot loads data from the clean csv file and produces a plot that is saved.", "+'''", "+", "+#standard imports", "+import pandas as pd", "+import matplotlib.pyplot as plt", "+", "+", "+def plot(df):", "+  '''plot(df) takes as input a clean dataframe and generates a plot. The", "+  style of the plot and variables are up to you.", "+  '''", "+  plt.scatter(df['A'],df['B'])", "+  return None", "+", "+", "+", "+#The main() function  of this program", "+if __name__ == \"__main__\":", "+    cdf = pd.read_csv('clean.csv')", "+    plot(cdf)", "+    plt.savefig('plot_2.png')"], "sub": []}, {"files": "diff --git a/explore/plot_3.py b/explore/plot_3.py", "add": ["+'''plot.py Plot loads data from the clean csv file and produces a plot that is saved.", "+'''", "+", "+#standard imports", "+import pandas as pd", "+import matplotlib.pyplot as plt", "+", "+", "+def plot(df):", "+  '''plot(df) takes as input a clean dataframe and generates a plot. The", "+  style of the plot and variables are up to you.", "+  '''", "+  plt.scatter(df['A'],df['B'])", "+  return None", "+", "+", "+", "+#The main() function  of this program", "+if __name__ == \"__main__\":", "+    cdf = pd.read_csv('clean.csv')", "+    plot(cdf)", "+    plt.savefig('plot_3.png')"], "sub": []}, {"files": "diff --git a/explore/plot_4.py b/explore/plot_4.py", "add": ["+'''plot.py Plot loads data from the clean csv file and produces a plot that is saved.", "+'''", "+", "+#standard imports", "+import pandas as pd", "+import matplotlib.pyplot as plt", "+", "+", "+def plot(df):", "+  '''plot(df) takes as input a clean dataframe and generates a plot. The", "+  style of the plot and variables are up to you.", "+  '''", "+  plt.scatter(df['A'],df['B'])", "+  return None", "+", "+", "+", "+#The main() function  of this program", "+if __name__ == \"__main__\":", "+    cdf = pd.read_csv('clean.csv')", "+    plot(cdf)", "+    plt.savefig('plot_4.png')"], "sub": []}, {"files": "diff --git a/explore/run.py b/explore/run.py", "add": ["+\"\"\"This python program executes your code", "+\"\"\"", "+", "+from git import Repo", "+import os", "+import time", "+import sys", "+import subprocess", "+", "+", "+#advanced feature change at your own risk", "+COMPILER_COMMAND = 'python' # replace with whatever usually used in the commandline ex. python3", "+", "+", "+", "+def check_diff(repo):", "+    hcommit = repo.head.commit", "+", "+    diffs = hcommit.diff(None)", "+", "+    if len(diffs) == 0:", "+        return False", "+    else:", "+        return True", "+", "+", "+def add_commit(id, check_changed = True, push = True):", "+    \"\"\"", "+    Add current changes and commit", "+    \"\"\"", "+    # need to check if anything in repo has changed", "+    repo = Repo(os.path.dirname(os.getcwd())) #changed to look at the parent", "+", "+    if check_changed:", "+        changed = check_diff(repo)", "+    else:", "+        changed = True", "+", "+    if changed:", "+        repo.git.add('.')", "+", "+        repo.git.commit('-m', id)", "+        if push:", "+            repo.remotes.origin.push()", "+        return changed", "+", "+    else:", "+        return changed", "+", "+", "+if __name__ == '__main__':", "+", "+    ##error checking", "+    if len(sys.argv) == 1:", "+        print(\"You must run the program as follows:\\n python run.py scratch.py \\n or \\n python run.py load.py \\n or \\n python run.py plot.py\")", "+        exit()", "+", "+", "+    id = str(time.time())", "+    committed = add_commit(id + '_start', push = False)", "+", "+    command = [COMPILER_COMMAND] + sys.argv[1:]", "+", "+    process = subprocess.run(command)", "+", "+    with open('./runs.txt', 'a') as f:", "+        record = '{} , {}, {} , error_code: {} \\n'.format(sys.argv[1], committed, id, process.returncode)", "+        f.write(record)", "+", "+    add_commit(id + '_end', check_changed = False, push=True)"], "sub": []}, {"files": "diff --git a/explore/runs.txt b/explore/runs.txt", "add": [], "sub": []}, {"files": "diff --git a/explore/scratch.py b/explore/scratch.py", "add": ["+'''scratch.py", "+", "+You will write down any \"scratch\" code that you use to explore the dataset in", "+this file. This code does not produce any outputs (it does not modify any files)", "+but allows you to explore the data. We're separating this code from the rest because", "+it allows us to understand your thought process during data exploration.", "+", "+*Remember to replace the return statements with your code*", "+'''", "+", "+#standard imports", "+import pandas as pd", "+import matplotlib.pyplot as plt", "+", "+", "+#TODO 1.", "+def load(filename):", "+  '''load(filename) takes as input a filename and loads a dataframe.", "+  '''", "+  return pd.read_csv(filename) #demo", "+", "+def clean(df):", "+  '''clean(df) takes as input a dataframe and fixes any data errors", "+     *that might affect your results*. it returns a copy of the dataframe", "+     without errors.", "+  '''", "+", "+  return df #demo", "+", "+", "+#TODO 2.", "+def plot(df):", "+  '''plot(df) takes as input a clean dataframe and generates a plot. The", "+  style of the plot and variables are up to you.", "+  '''", "+", "+  plt.scatter(df['A'],df['B'])", "+  return None", "+", "+", "+", "+#The main() function  of this program", "+", "+if __name__ == \"__main__\":", "+    df = load('data.csv')", "+    cdf = clean(df)", "+    plot(cdf)", "+    plt.show()", "+", "+"], "sub": []}, {"files": "diff --git a/requirements.txt b/requirements.txt", "add": ["+appnope==0.1.2", "+argon2-cffi==20.1.0", "+async-generator==1.10", "+attrs==21.2.0", "+backcall==0.2.0", "+bitstring==3.1.9", "+bleach==3.3.0", "+cffi==1.14.5", "+click==8.0.0", "+cloudpickle==1.6.0", "+cycler==0.10.0", "+dask==2021.4.1", "+decorator==5.0.7", "+defusedxml==0.7.1", "+distributed==2021.4.1", "+entrypoints==0.3", "+fsspec==2021.5.0", "+gitdb==4.0.9", "+GitPython==3.1.24", "+graphviz==0.16", "+HeapDict==1.0.1", "+ipykernel==5.5.5", "+ipython==7.23.1", "+ipython-genutils==0.2.0", "+ipywidgets==7.6.3", "+jedi==0.18.0", "+Jinja2==3.0.0", "+joblib==1.0.1", "+jsonschema==3.2.0", "+jupyter==1.0.0", "+jupyter-client==6.1.12", "+jupyter-console==6.4.0", "+jupyter-core==4.7.1", "+jupyterlab-pygments==0.1.2", "+jupyterlab-widgets==1.0.0", "+kiwisolver==1.3.1", "+locket==0.2.1", "+MarkupSafe==2.0.0", "+matplotlib==3.4.2", "+matplotlib-inline==0.1.2", "+mistune==0.8.4", "+msgpack==1.0.2", "+nbclient==0.5.3", "+nbconvert==6.0.7", "+nbformat==5.1.3", "+nest-asyncio==1.5.1", "+notebook==6.3.0", "+numpy==1.20.3", "+packaging==20.9", "+pandas==1.2.4", "+pandocfilters==1.4.3", "+parso==0.8.2", "+partd==1.2.0", "+pexpect==4.8.0", "+pickleshare==0.7.5", "+Pillow==8.2.0", "+prometheus-client==0.10.1", "+prompt-toolkit==3.0.18", "+psutil==5.8.0", "+ptyprocess==0.7.0", "+pycparser==2.20", "+Pygments==2.9.0", "+pyparsing==2.4.7", "+pyrsistent==0.17.3", "+python-dateutil==2.8.1", "+pytz==2021.1", "+PyYAML==5.4.1", "+pyzmq==22.0.3", "+qtconsole==5.1.0", "+QtPy==1.9.0", "+scikit-learn==0.24.2", "+scipy==1.6.3", "+Send2Trash==1.5.0", "+six==1.16.0", "+sklearn==0.0", "+smmap==5.0.0", "+sortedcontainers==2.3.0", "+tblib==1.7.0", "+terminado==0.9.5", "+testpath==0.4.4", "+threadpoolctl==2.1.0", "+toolz==0.11.1", "+tornado==6.1", "+traitlets==5.0.5", "+typing-extensions==3.10.0.2", "+wcwidth==0.2.5", "+webencodings==0.5.1", "+widgetsnbextension==3.5.1", "+zict==2.0.0"], "sub": []}], "author": "github-classroom[bot] <66690702+github-classroom[bot]@users.noreply.github.com>", "date": "Mon Nov 22 01:02:41 2021 +0000", "msg": "Initial commit"}]